{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/introducao-programacao-cython/","result":{"data":{"site":{"siteMetadata":{"title":"Anderson Berg","social":[{"name":"twitter","url":"https://twitter.com/berg_pe"},{"name":"github","url":"https://github.com/andersonberg"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"fc5250c1-0492-5b95-8ed8-aca906319b7c","excerpt":"Quando o seu programa exige muita velocidade, não tem jeito, o código tem que ser escrito em C. Mas todo programador sabe o quão penoso pode…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introdução à programação em Cython\",\n  \"date\": \"2011-09-10T03:20:23.000Z\",\n  \"tags\": [\"cython\"],\n  \"category\": \"Tutorial\",\n  \"slug\": \"introducao-programacao-cython\",\n  \"summary\": \"Quando o seu programa exige muita velocidade, não tem jeito, o código tem que ser escrito em C. Mas todo programador sabe o quão penoso pode ser programar em C e os diversos problemas que podem surgir no seu código contribuindo com o atraso na entrega do programa final. E porque não juntar a facilidade de programar em Python com a rapidez de execução de C? Essa é a proposta do Cython, uma extensão Python que permite que sejam utilizados tipos de C dentro do código Python.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Quando o seu programa exige muita velocidade, n\\xE3o tem jeito, o c\\xF3digo tem que ser escrito em C. Mas todo programador sabe o qu\\xE3o penoso pode ser programar em C e os diversos problemas que podem surgir no seu c\\xF3digo contribuindo com o atraso na entrega do programa final. E porque n\\xE3o juntar a facilidade de programar em Python com a rapidez de execu\\xE7\\xE3o de C? Essa \\xE9 a proposta do Cython, uma extens\\xE3o Python que permite que sejam utilizados tipos de C dentro do c\\xF3digo Python.\"), mdx(\"h3\", {\n    \"id\": \"instalação\"\n  }, \"INSTALA\\xC7\\xC3O\"), mdx(\"p\", null, \"O primeiro passo \\xE9 a instala\\xE7\\xE3o. Voc\\xEA pode instalar o Cython atrav\\xE9s do setuptools, digitando, na linha de comando:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ easy_install cython\\n\")), mdx(\"p\", null, \"Esse comando funciona tanto na linha de comando no Linux, quanto no prompt do Windows.\"), mdx(\"p\", null, \"Se voc\\xEA n\\xE3o tem instalado o setuptools no Linux basta procurar pelo pacote hom\\xF4nimo e instal\\xE1-lo. No Windows, basta baixar o execut\\xE1vel, na \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://pypi.python.org/pypi/setuptools#windows\"\n  }), \"p\\xE1gina do pacote\"), \" e instalar.\"), mdx(\"p\", null, \"Uma alternativa \\xE9 baixar o Cython no \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.cython.org\"\n  }), \"site\"), \", extrair os arquivos e fazer na linha de comando:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ python setup.py install\\n\")), mdx(\"p\", null, \"Dica do \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://frsoares.wordpress.com/\"\n  }), \"Francisco\"), \":\"), mdx(\"p\", null, \"Em sistemas Debian e derivados, \\xE9 poss\\xEDvel instalar o cython pelo apt-get:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$\\xA0sudo apt-get install cython\\n\")), mdx(\"h3\", {\n    \"id\": \"tutorial\"\n  }, \"TUTORIAL\"), mdx(\"p\", null, \"Para utilizar Cython em seu c\\xF3digo, \\xE9 preciso primeiro criar um arquivo com exten\\xE7\\xE3o .pyx. Para um primeiro teste crie um arquivo chamado helloworld.pyx e escreva a seguinte linha:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"print \\\"Hello World\\\"\\n\")), mdx(\"p\", null, \"Em seguida, crie um arquivo chamado setup.py que tenha o seguinte conte\\xFAdo:\"), mdx(\"p\", null, \"Ent\\xE3o, basta compilar utilizando o seguinte comando:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ python setup.py build_ext --inplace\\n\")), mdx(\"p\", null, \"Depois \\xE9 s\\xF3 entrar no interpretador e importar o m\\xF3dulo criado:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \">>> import helloworld\\nHello World\\n\")), mdx(\"p\", null, \"Vamos avan\\xE7ar e criar um c\\xF3digo que realmente tenha tipos de dados de C. Vamos criar uma fun\\xE7\\xE3o que retorne todos os n\\xFAmeros primos de 1 at\\xE9 um limite passado como par\\xE2metro e salvar num arquivo chamado primes.pyx.\"), mdx(\"p\", null, \"Para declarar tipos C, voc\\xEA deve usar \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cdef\"), \" e informar o tipo de dado, como nas linhas 2 e 3. Na linha 3, como qualquer array em C, deve ser informado o tamanho do array.\"), mdx(\"p\", null, \"Nas linha 9 e 11 \\xE9 que aparece o ganho no desempenho, a itera\\xE7\\xE3o dos blocos \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"while\"), \" \\xE9 feita com tipos C, que torna a execu\\xE7\\xE3o mais r\\xE1pida.\"), mdx(\"p\", null, \"Feito isso, basta criar o arquivo setup.py, como no exemplo anterior:\"), mdx(\"p\", null, \"E compilar com o comando:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ python setup.py build_ext --inplace\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/introducao-programacao-cython/","title":"Introdução à programação em Cython","tags":["cython"],"date":"September 10, 2011","image":null,"imageAlt":null,"imageCaptionText":null,"imageCaptionLink":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"83fef028-b5a7-5bbf-b478-ada0091314f5","excerpt":"No Linux, um bom editor para código Python é o Vim. Costumo usar o Vim no Ubuntu e tem sido uma boa experiência. O Vim pode ser instalado…","slug":"/programando-python-vim/","title":"Programando em Python no Vim","date":"September 08, 2011"},"next":{"__typename":"MdxBlogPost","id":"9f81a631-04c8-5ec1-8372-ea26f9201ae4","excerpt":"Em diversas situações é necessário criar um arquivo executável a partir do seu código. Às vezes é preciso entregar um programa a um cliente…","slug":"/seu-codigo-python-executavel-py2exe/","title":"Transformando seu Código Python em Executável com o py2exe","date":"September 14, 2011"}},"pageContext":{"id":"fc5250c1-0492-5b95-8ed8-aca906319b7c","previousId":"83fef028-b5a7-5bbf-b478-ada0091314f5","nextId":"9f81a631-04c8-5ec1-8372-ea26f9201ae4","maxWidth":1380}},"staticQueryHashes":["2744905544","3090755652","386998304","764694655"]}