import Highlight, { defaultProps } from 'prism-react-renderer';
import { jsx, Styled } from 'theme-ui';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var aliases = {
  js: 'javascript',
  sh: 'bash'
};

var isInRange = function isInRange(start, end, num) {
  if (num >= start && num <= end) {
    return true;
  }

  return false;
};

var checkRanges = function checkRanges(range, num) {
  for (var i = 0; i < range.length; i += 2) {
    if (isInRange(range[i], range[i + 1], num)) {
      return true;
    }
  }

  return false;
};

function ThemeUIPrism(_ref) {
  var children = _ref.children,
      outerClassName = _ref.className,
      props = _objectWithoutProperties(_ref, ["children", "className"]);

  var _outerClassName$repla = outerClassName.replace(/language-/, '').split(' '),
      _outerClassName$repla2 = _slicedToArray(_outerClassName$repla, 1),
      language = _outerClassName$repla2[0];

  var lang = aliases[language] || language;
  var startEndRangesToHighlight = [];

  var findStartAndEndHighlights = function findStartAndEndHighlights(tokens) {
    var tokensWithoutHighlightComments = tokens.filter(function (item, index) {
      var removeLine = item.map(function (_ref2) {
        var content = _ref2.content;

        if (content === '// highlight-start') {
          startEndRangesToHighlight.push(index); // track our highlighted lines

          return true;
        }

        if (content === '// highlight-end') {
          startEndRangesToHighlight.push(index - 2); // since we're removing start and end lines, we'll shorten the range by 2 lines

          return true;
        }
      }).filter(Boolean)[0];

      if (!removeLine) {
        return item;
      }
    });
    return tokensWithoutHighlightComments;
  };

  var isStartEndHighlighted = function isStartEndHighlighted(index) {
    return checkRanges(startEndRangesToHighlight, index);
  };

  var isInlineHighlighted = function isInlineHighlighted(line) {
    var regex = new RegExp('// highlight-line$');
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = line[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var token = _step.value;

        if (regex.test(token.content)) {
          token.content = token.content.replace(regex, ''); // remove the highlight-line comment now that we've acted on it

          return true;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return false;
  };

  var shouldHighlightLine = function shouldHighlightLine(line, index) {
    return isStartEndHighlighted(index) || isInlineHighlighted(line);
  };

  return jsx(Highlight, Object.assign({}, defaultProps, props, {
    code: children.trim(),
    language: lang,
    theme: undefined
  }), function (_ref3) {
    var className = _ref3.className,
        style = _ref3.style,
        tokens = _ref3.tokens,
        getLineProps = _ref3.getLineProps,
        getTokenProps = _ref3.getTokenProps;
    var tokensWithoutHighlightComments = findStartAndEndHighlights(tokens);
    return jsx(Styled.pre, {
      className: "".concat(outerClassName, " ").concat(className),
      style: style
    }, tokensWithoutHighlightComments.map(function (line, i) {
      var lineProps = getLineProps({
        line: line,
        key: i
      });

      if (shouldHighlightLine(line, i)) {
        lineProps.className = "".concat(lineProps.className, " highlight");
      }

      return jsx("div", Object.assign({}, lineProps), line.map(function (token, key) {
        return jsx("span", Object.assign({}, getTokenProps({
          token: token,
          key: key
        }), {
          sx: token.empty ? {
            display: 'inline-block'
          } : undefined
        }));
      }));
    }));
  });
}

export default ThemeUIPrism;
//# sourceMappingURL=prism.esm.js.map
