<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pythonize</title><link href="https://andersonberg.github.io/pythonize-pelican/" rel="alternate"></link><link href="https://andersonberg.github.io/pythonize-pelican/feeds/all.atom.xml" rel="self"></link><id>https://andersonberg.github.io/pythonize-pelican/</id><updated>2014-12-28T01:11:22-03:00</updated><entry><title>Como Criar um Blog de Forma Simples e Rápida com Django</title><link href="https://andersonberg.github.io/pythonize-pelican/como-criar-um-blog-com-django.html" rel="alternate"></link><published>2014-12-28T01:11:22-03:00</published><updated>2014-12-28T01:11:22-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2014-12-28:/pythonize-pelican/como-criar-um-blog-com-django.html</id><summary type="html">&lt;p&gt;Você quer criar um blog pra espalhar suas ideias na rede? Quer fazer isso em poucos passos usando Django? Nas últimas semanas fizemos algumas mudanças no Pythonize e agora o blog está totalmente em Django! Neste post vou contar um pouco como foi a experiência de criar um blog em Django usando o &lt;strong&gt;Mezzanine&lt;/strong&gt;, um CMS muito poderoso que já vem com um admin pronto para blogs.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Você quer criar um blog pra espalhar suas ideias na rede?&lt;/p&gt;
&lt;p&gt;Quer fazer isso em &lt;strong&gt;poucos passos&lt;/strong&gt; usando &lt;strong&gt;Django&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Nas últimas semanas fizemos algumas mudanças no Pythonize e agora o blog está totalmente em &lt;strong&gt;Django&lt;/strong&gt;! Já era uma coisa que eu planejava fazer, afinal um blog que fala sobre Python é bom que seja feito com Python.&lt;/p&gt;
&lt;p&gt;Neste post vou contar um pouco como foi a experiência de criar um blog em Django usando o &lt;strong&gt;Mezzanine&lt;/strong&gt;, um CMS muito poderoso que já vem com um admin pronto para blogs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continue lendo este artigo&lt;/strong&gt; para aprender, com detalhes, como instalar o Mezzanine, criar um projeto, configurar e aplicar um tema. No final, ainda vou dar uma dica bônus.&lt;/p&gt;
&lt;p&gt;Também fizemos a migração do servidor para o &lt;a href="https://www.digitalocean.com/?refcode=c831ddc18699"&gt;DigitalOcean&lt;/a&gt;. Se você ainda não tem um servidor, recomendo o DigitalOcean e clicando &lt;a href="https://www.digitalocean.com/?refcode=c831ddc18699"&gt;neste link&lt;/a&gt; para fazer o cadastro, você ajuda a pagar uma parte da conta do Pythonize :)&lt;/p&gt;
&lt;h2&gt;Instalando o Mezzanine&lt;/h2&gt;
&lt;p&gt;O Mezzanine vem com diversas features bem úteis como integração com &lt;strong&gt;Analytics&lt;/strong&gt;, &lt;strong&gt;Disqus&lt;/strong&gt; e &lt;strong&gt;Gravatar&lt;/strong&gt;. A lista completa você pode ver em: http://mezzanine.jupo.org/docs/overview.html#features&lt;/p&gt;
&lt;p&gt;A instalação do Mezzanine é bem simples, vamos começar criando um ambiente virtual.&lt;/p&gt;
&lt;h3&gt;Criando um ambiente virtual&lt;/h3&gt;
&lt;p&gt;Antes de tudo é sempre recomendável instalar o virtualenv, pra não poluir o seu ambiente. O virtualenv é uma ferramenta que cria um ambiente Python separado do seu sistema, evitando maiores dores de cabeça com configurações.&lt;/p&gt;
&lt;p&gt;Para criar um ambiente virtual é bem simples, basta passar o comando virtualenv seguido do diretório onde vai ser armazenado o ambiente, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv venv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No Windows você precisa fazer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; \path\to\env\Scripts\activate
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Instalando o Mezzanine e as dependências&lt;/h3&gt;
&lt;p&gt;Com o ambiente virtual ativado, você pode usar o pip para instalar o Mezzanine e todas as dependências necessárias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install mezzanine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, o pip se encarrega de instalar todas as dependências e o próprio Mezzanine. No final, você já estará pronto para criar seu primeiro projeto com o Mezzanine.&lt;/p&gt;
&lt;h2&gt;Usando o Mezzanine&lt;/h2&gt;
&lt;p&gt;O Mezzanine funciona de uma forma muito parecida do Django. Para criar um novo projeto Mezzanine, faça de forma semelhante a criar um projeto Django:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mezzanine-project meu_blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simples né?
Agora o Mezzanine já criou toda a estrutura do projeto, igualzinho como o Django faz:&lt;/p&gt;
&lt;h3&gt;Criando um banco de dados&lt;/h3&gt;
&lt;p&gt;O Mezzanine vem com algumas ferramentas além das que já conhecemos do Django. Para criar e iniciar um banco de dados basta você rodar o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py createdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando você rodar este comando vão aparecer algumas perguntas que você pode responder facilmente.&lt;/p&gt;
&lt;h3&gt;Editando as configurações&lt;/h3&gt;
&lt;p&gt;Agora, antes de começar a testar é hora de você mexer nas configurações da sua aplicação. Abra o arquivo settings.py na raiz do seu projeto e procure a seguinte linha:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;E troque pelo seguinte:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;.example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Allow domain and subdomains&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;.example.com.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Also allow FQDN and subdomains&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Esta é uma lista de strings que representam os hosts e domínios que seu site Django pode servir. Lembre-se de trocas 'example.com' pelo nome do seu domínio.&lt;/p&gt;
&lt;p&gt;Busque também pela linha:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;E substitua pelo seu fuso horário, por exemplo:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;America/Recife&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Testando seu site&lt;/h3&gt;
&lt;p&gt;Para ver como está o seu blog até agora, execute o seguinte na linha de comando (com o ambiente virtual ativado):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você pode ver seu site acessando o endereço http://127.0.0.1:8000/ no seu browser. Para terminar o servidor, pressione CTRL+C.&lt;/p&gt;
&lt;h3&gt;Escreva novos artigos&lt;/h3&gt;
&lt;p&gt;Você tem acesso à tela de administração indo até: http://127.0.0.1:8000/admin/ e digitando usuário e senha que você criou quando executou o comando para criação do banco de dados.&lt;/p&gt;
&lt;p&gt;Lá você terá acesso ao dashboard do Mezzanine, onde é possível escrever artigos, gerenciar arquivos de mídia, criar novas páginas pro site e outras coisas.&lt;/p&gt;
&lt;h3&gt;Aplicando um tema&lt;/h3&gt;
&lt;p&gt;Um site não é nada sem um bom layout. Até agora, só cuidamos do back-end do blog, precisamos então dar uma cara pra ele.&lt;/p&gt;
&lt;p&gt;O Mezzanine já tem temas prontos para serem usados e que se integram à ferramenta, todos baseados no bootstrap. Você pode optar por &lt;a href="http://thecodinghouse.in/themes/"&gt;temas gratuitos&lt;/a&gt; ou &lt;a href="http://mezzathe.me/"&gt;temas premium pagos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Escolha um dos temas gratuitos e faça o download. O tema é um app Django, então basta copiar dentro do projeto Mezzanine e adicionar ao INSTALLED_APPS no arquivo settings.py. É recomendável que seja o primeiro app na lista.&lt;/p&gt;
&lt;p&gt;Pronto, seu blog está totalmente configurado e com um belo template, agora é só criar conteúdo para seus leitores.&lt;/p&gt;
&lt;h2&gt;Bônus: Como migrar seu site Wordpress para Mezzanine&lt;/h2&gt;
&lt;p&gt;Com o Mezzanine é possível importar artigos de outras plataformas de blog como Wordpress e Blogger.&lt;/p&gt;
&lt;p&gt;Para fazer a importação dos seus artigos do Wordpress, primeiro é preciso instalar o &lt;a href="https://code.google.com/p/feedparser/"&gt;feedparser&lt;/a&gt;, que pode ser instalar via pip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install feedparser
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Faça login no seu blog Wordpress e vá em Ferramentas -&amp;gt; Exportar. Nesta tela você pode configurar alguns filtros e realizar a exportação do arquivo. Lembre-se de guardar o caminho onde o arquivo foi baixado.&lt;/p&gt;
&lt;p&gt;O comando pra importar os artigos do Wordpress só funciona com o Python 2. Quando criar o ambiente virtual é importante informar ao virtualenv qual é a versão do Python que você deseja utilizar, por exemplo, no Linux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv -p /usr/bin/python2.7 venv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por último, simplesmente execute o comando import_wordpress, passando o seu usuário no mezzanine e o caminho onde está o arquivo no argumento 'url':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py import_wordpress --mezzanine-user=.. --url=[caminho_do_arquivo]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Concluindo&lt;/h3&gt;
&lt;p&gt;Foi muito gratificante finalmente conseguir migrar o Pythonize pra Django. E o Mezzanine facilitou bastante esse trabalho. Agora é muito mais fácil pra mim gerenciar o site e fazer modificações, pois está tudo em Python e não em PHP como no Wordpress.&lt;/p&gt;
&lt;p&gt;Consegui integrar com todas as ferramentas que utilizava antes no Wordpress, principalmente Analytics e Disqus, tudo foi muito simples.&lt;/p&gt;
&lt;p&gt;Agora tenho uma pergunta para você&lt;/p&gt;
&lt;p&gt;O que você achou de trabalhar com Django e Mezzanine para criar um blog?&lt;/p&gt;
&lt;p&gt;Deixe seu comentário logo abaixo!&lt;/p&gt;
&lt;p&gt;Imagem por: &lt;a href="http://www.flickr.com/photos/futureshape/4977096245/"&gt;futureshape&lt;/a&gt;&lt;/p&gt;</content><category term="django"></category><category term="blog"></category><category term="mezzanine"></category></entry><entry><title>20 artigos e sites essenciais para você aprender Python</title><link href="https://andersonberg.github.io/pythonize-pelican/20-artigos-e-sites-essenciais-para-voce-aprender-python.html" rel="alternate"></link><published>2014-12-15T19:29:33-03:00</published><updated>2014-12-15T19:29:33-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2014-12-15:/pythonize-pelican/20-artigos-e-sites-essenciais-para-voce-aprender-python.html</id><summary type="html">&lt;p&gt;Durante nossa caminhada profissional utilizamos diversos recursos para prosseguir, aprender e adquirir experiência. Neste artigo eu quero compartilhar com você 20 dos principais sites e artigos para aprender Python e mais alguns de bônus para quem quer se aprofundar.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Durante nossa caminhada profissional utilizamos diversos recursos para prosseguir, aprender e adquirir experiência.&lt;/p&gt;
&lt;p&gt;Neste artigo eu quero compartilhar com você 20 dos principais sites e artigos para aprender Python.&lt;/p&gt;
&lt;p&gt;Muitos deles eu li na íntegra, outros os principais tópicos, mas todos tiveram contribuição na construção do meu conhecimento em Python.&lt;/p&gt;
&lt;h3&gt;1. &lt;a href="http://www.pythonforbeginners.com/"&gt;Python For Begginers&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Um dos melhores para iniciantes, bom também para os mais experientes, pois apresenta dicas que servem até como &lt;strong&gt;lembretes&lt;/strong&gt; na hora de desenvolver um projeto.&lt;/p&gt;
&lt;p&gt;Artigo compilando dicas para usar Python na web: &lt;a href="http://www.pythonforbeginners.com/basics/python-quick-start-web"&gt;Python Quick Start Web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Artigo sobre o básico de Python: &lt;a href="http://www.pythonforbeginners.com/basics/python-quick-guide"&gt;Python - Quick Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;2. &lt;a href="https://developers.google.com/edu/python/"&gt;Google’s Python Class&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Uma das melhores referências para aprender Python. Material criado pelo &lt;a href="http://cs.stanford.edu/people/nick/"&gt;Nick Parlante&lt;/a&gt;, contém vídeos e exercícios para facilitar o aprendizado. O conteúdo abrange somente o básico de Python, pois as aulas foram ministradas em apenas dois dias. Pra quem está começando &lt;strong&gt;recomendo iniciar por aqui&lt;/strong&gt;, foi muito útil quando eu comecei a estudar Python.&lt;/p&gt;
&lt;h3&gt;3. &lt;a href="https://ark4n.wordpress.com/python/"&gt;Python para desenvolvedores&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Livro muito bom em &lt;strong&gt;Português&lt;/strong&gt; para quem &lt;strong&gt;já desenvolve&lt;/strong&gt; em outra linguagem e quer aprender Python. Serve como livro de cabeceira para fazer consultas sempre que uma dúvida surgir.&lt;/p&gt;
&lt;h3&gt;4. &lt;a href="http://www.diveintopython3.net/"&gt;Dive Into Python 3 &lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Livro totalmente &lt;strong&gt;gratuito&lt;/strong&gt;, em inglês, um dos melhores para aprender a programar em Python.&lt;/p&gt;
&lt;h3&gt;5. &lt;a href="http://www.stavros.io/tutorials/python/"&gt;Learn Python in 10 minutes&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Tutorial &lt;strong&gt;completo&lt;/strong&gt; com o básico para iniciantes em Python. É simplesmente um "resumão" com os tópicos básicos da linguagem. Para os mais experientes serve como uma boa referência de &lt;strong&gt;consulta&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;6. &lt;a href="http://www.afterhoursprogramming.com/tutorial/Python/Overview/"&gt;Python Overview Tutorial&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Mais um tutorial para começar a programar em Python. Ao longo do tutorial, você pode &lt;strong&gt;interagir&lt;/strong&gt; e testar o código diretamente em um console Python embutido no site.&lt;/p&gt;
&lt;h3&gt;7. &lt;a href="http://interactivepython.org/courselib/static/thinkcspy/toc.html"&gt;How To Think Like a Computer Scientist&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Este é um livro que ensina como ser um cientista da computação e usa Python como linguagem de programação. Achei muito interessante a abordagem deste livro. Ele traz exercícios em cada capítulo que podem ser respondidos direto no site. Alguns capítulos também possuem vídeos (screencasts) comentando algumas partes do livro.&lt;/p&gt;
&lt;h3&gt;8. &lt;a href="http://www.pythontutor.com/?utm_source=Python%20Weekly%20Newsletter&amp;amp;utm_campaign=8742268291-Python_Weekly_Issue_53_September_20_2012&amp;amp;utm_medium=email"&gt;Online Python Tutor&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;É uma ferramenta online para ensino da programação em Python. É possível embutir o Python Tutor em sua própria página web.&lt;/p&gt;
&lt;h3&gt;9. &lt;a href="http://pedrokroger.net/"&gt;Pedro Kroger&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Blog do autor do livro: &lt;a href="http://musicforgeeksandnerds.com/"&gt;Music For Geeks and Nerds&lt;/a&gt;. Em seu blog, o Dr. Pedro Kroeger dá um monte de dicas para programar em Python.&lt;/p&gt;
&lt;p&gt;Artigo com dicas para configurar e usar o PyCharm: &lt;a href="http://pedrokroger.net/getting-started-pycharm-python-ide/"&gt;How to Get Started with PyCharm and Have a Productive Python IDE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Arquivo (PDF) com um guia de referência rápida do Python: &lt;a href="https://cloud.github.com/downloads/kroger/python-quick-ref/python-quick-ref.pdf"&gt;Python 3 Quick Reference&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;10. &lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker’s Guide to Python&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Um verdadeiro guia para desenvolvedores iniciantes e experientes. É um livro com boas práticas desde a instalação, configuração e uso diário de Python. Não é preciso ler o livro todo, mas alguns capítulos são bem interessantes para aprimorar seu conhecimento em programação.&lt;/p&gt;
&lt;p&gt;Artigo sobre estrutura de um projeto em Python: &lt;a href="http://docs.python-guide.org/en/latest/writing/structure/"&gt;Structuring Your Project&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;11. &lt;a href="http://aimotion.blogspot.com.br"&gt;Artificial Intelligence in Motion&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Blog de um grande amigo que trabalha com computação inteligente em Python diariamente. Ele escreve vários artigos sobre aplicações de inteligência artificial com Python.&lt;/p&gt;
&lt;p&gt;Artigo sobre árvores de decisão: &lt;a href="http://aimotion.blogspot.com.br/2009/04/artigo-introducao-arvores-de-decisao.html"&gt;Introdução a Árvores de decisão para classificação e mineração de dados&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;12. &lt;a href="https://realpython.com/blog/"&gt;Real Python&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Blog com muitos tutoriais e artigos sobre Python em todas as áreas, mas o forte desse blog mesmo é Python na web.&lt;/p&gt;
&lt;p&gt;Artigo sobre Django e Ajax: &lt;a href="https://realpython.com/blog/python/django-and-ajax-form-submissions-more-practice/"&gt;Django and AJAX Form Submissions - More Practice&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;13. &lt;a href="http://jeffknupp.com/"&gt;Jeff Knupp&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Quer escrever códigos melhores e mais eficientes? Siga as dicas do Jeff Knupp, autor do livro &lt;a href="https://www.jeffknupp.com/writing-idiomatic-python-ebook/"&gt;Writing Idiomatic Python&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;14. &lt;a href="http://pymbook.readthedocs.org/en/latest/"&gt;Welcome to Python for you and me&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Livro tutorial bem simples para iniciantes em Python. Cobre tópicos como módulos, PEP8 e testes em Python.&lt;/p&gt;
&lt;p&gt;Versão para Python3: http://pymbook.readthedocs.org/en/py3/&lt;/p&gt;
&lt;h3&gt;15. &lt;a href="http://learnpythonthehardway.org/book/"&gt;Learn Python The Hard Way&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Apesar do nome, a abordagem para ensinar Python é bem simples, todos os exemplos e exercícios são bem detalhados. Perfeito pra quem quer começar a aprender Python.&lt;/p&gt;
&lt;h3&gt;16. &lt;a href="http://lgiordani.com/"&gt;The Digital Cat&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Não é um blog só sobre Python, mas a maioria dos artigos trás dicas para programar na linguagem.&lt;/p&gt;
&lt;p&gt;Série sobre POO em Python 3: &lt;a href="http://lgiordani.com/blog/2014/08/20/python-3-oop-part-1-objects-and-types/"&gt;Python 3 OOP Part 1 - Objects and types&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Artigo sobre decorators: &lt;a href="http://lgiordani.com/blog/2014/10/14/decorators-and-metaclasses/"&gt;Advanced use of Python decorators and metaclasses&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;17. &lt;a href="http://blog.lerner.co.il/"&gt;Lerner Consulting Blog&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Autor do ebook: Practice Makes Python&lt;/p&gt;
&lt;p&gt;Artigo sobre str.format(): http://blog.lerner.co.il/teaching-old-dog-new-tricks-learned-love-str-format-gave/&lt;/p&gt;
&lt;h3&gt;18. &lt;a href="http://pycursos.com"&gt;PyCursos&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Site com diversos cursos de Python, todos de altíssima qualidade. Existem cursos para todas as áreas utilizando Python: web, computação científica, jogos, etc. O site também tem vários webinários realizados pelos professores e convidados.&lt;/p&gt;
&lt;p&gt;Alguns cursos:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pycursos.com/desenvolvimento-agil-para-web-com-web2py/"&gt;Desenvolvimento Ágil para Web com web2py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pycursos.com/django/"&gt;Python na Web com Django (Python 3)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pycursos.com/python-para-zumbis/"&gt;Python para zumbis&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;19. &lt;a href="http://www.codecademy.com/tracks/python"&gt;Codecademy&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;O famoso site de cursos interativos também tem um curso de Python. O curso de Python é bastante completo mostrando tópicos básicos e avançados.&lt;/p&gt;
&lt;h3&gt;20. &lt;a href="http://pythonhelp.wordpress.com/"&gt;Python Help&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Blog com muito conteúdo bom de Python. Um dos autores, &lt;a href="https://twitter.com/eliasdorneles"&gt;Elias Dorneles&lt;/a&gt; foi palestrante na &lt;a href="http://2014.pythonbrasil.org.br/schedule/"&gt;PythonBrasil[10]&lt;/a&gt; e tive o prazer de conhecer e trocar umas ideias sobre extração de conteúdo na web.&lt;/p&gt;
&lt;p&gt;Tem artigos para todos os gostos, tem pra iniciantes ou experientes programadores em Python. Vale a pena dar uma conferida em alguns deles.&lt;/p&gt;
&lt;p&gt;Artigo sobre web scraping: &lt;a href="http://pythonhelp.wordpress.com/2014/08/05/web-scraping-com-scrapy-primeiros-passos/"&gt;WEB SCRAPING COM SCRAPY – PRIMEIROS PASSOS&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;UPDATE: 21. &lt;a href="https://ericstk.wordpress.com/"&gt;Aprendendo Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;São tantos sites bons que deixei passar um muito legal do Eric Hideki, o Aprendendo Python. Não é só um blog para ensino da linguagem, mas mostra tudo sobre a comunidade Python, principalmente no Brasil.&lt;/p&gt;
&lt;p&gt;Quem tem curiosidade de saber como as pessoas usam Python, quais os projetos que existem em Python por aí, este é um ótimo lugar pra conhecer.&lt;/p&gt;
&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;Esta lista está longe de ser definitiva e posso ter sido injusto com alguns sites, inclusive com os que eu não conheço. Estes são apenas sugestões para quem está começando ou quer aprimorar os conhecimentos em Python.&lt;/p&gt;
&lt;p&gt;Agora tenho duas perguntas pra você:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Você gostou das sugestões de sites e artigos?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Você tem outras sugestões de sites e artigos?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Então deixe seu comentário logo abaixo.&lt;/p&gt;</content><category term="python"></category><category term="sites"></category><category term="artigos"></category></entry><entry><title>Por que você deve ir a uma PythonBrasil</title><link href="https://andersonberg.github.io/pythonize-pelican/porque-voce-deve-ir-a-uma-pythonbrasil.html" rel="alternate"></link><published>2014-11-29T12:42:30-03:00</published><updated>2014-11-29T12:42:30-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2014-11-29:/pythonize-pelican/porque-voce-deve-ir-a-uma-pythonbrasil.html</id><summary type="html">&lt;p&gt;Você quer um lugar pra aprender coisas novas, ficar antenado com novas tecnologias, trocar ideias com um monte de gente legal e interessante? Então você precisa ir a uma PythonBrasil!&lt;/p&gt;</summary><content type="html">&lt;p dir="ltr"&gt;Voc&amp;ecirc; quer um lugar pra &lt;strong&gt;aprender&lt;/strong&gt; coisas novas, ficar &lt;strong&gt;antenado&lt;/strong&gt; com novas tecnologias, &lt;strong&gt;trocar ideias&lt;/strong&gt; com um monte de gente legal e interessante? Ent&amp;atilde;o voc&amp;ecirc; precisa ir a uma &lt;strong&gt;PythonBrasil&lt;/strong&gt;!&lt;/p&gt;

&lt;p dir="ltr"&gt;&lt;/p&gt;

&lt;p dir="ltr"&gt;No primeiro final de semana de novembro (6 a 9) ocorreu a &lt;a href="http://2014.pythonbrasil.org.br/" target="_blank" class="external"&gt;&lt;strong&gt;PythonBrasil [10]&lt;/strong&gt;&lt;/a&gt; em Porto de Galinhas, Pernambuco. H&amp;aacute; muitos anos que tenho pensado em ir a uma Python Brasil, mas sempre esbarrei no problema de comprar passagens, al&amp;eacute;m de arcar com os custos de ficar hospedado em uma cidade longe de onde se mora.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p dir="ltr"&gt;Este ano foi diferente, eu poderia finalmente participar de um grande evento da comunidade Python. Depois de tantas palavras de incentivo de amigos e de ler &lt;a href="http://henriquebastos.net/porque-voce-precisa-ir-na-pythonbrasil-2014/#more-1352" target="_blank"&gt;este artigo&lt;/a&gt; do Henrique Bastos, eu n&amp;atilde;o poderia deixar de ir.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p dir="ltr"&gt;N&amp;atilde;o sei se toda Python Brasil &amp;eacute; assim, mas comparando com outros eventos que j&amp;aacute; participei, o congresso foi muito bem organizado (sem querer puxar sardinha para os meus conterr&amp;acirc;neos).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p dir="ltr"&gt;Sem contar a qualidade das palestras, muita gente disposta a te ajudar e orientar. Todos muito simp&amp;aacute;ticos. N&amp;atilde;o falo s&amp;oacute; da equipe de organiza&amp;ccedil;&amp;atilde;o, mas dos pr&amp;oacute;prios conferencistas e palestrantes.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Nem s&amp;oacute; de palestras vive uma PythonBrasil&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Foto Oficial da PythonBrasil na praia de Porto de Galinhas" src="/static/media/uploads/blog/images/pybr_600.jpg"&gt;
&lt;p dir="ltr"&gt;Claro, o melhor deste tipo de evento n&amp;atilde;o s&amp;atilde;o as palestras, por mais qualidade que tenham. O principal &amp;eacute; o &lt;strong&gt;networking&lt;/strong&gt;.&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Conversar com pessoas de diversas partes do pa&amp;iacute;s e do mundo, ouvir suas hist&amp;oacute;rias, suas experi&amp;ecirc;ncias. Ouvir o que elas t&amp;ecirc;m constru&amp;iacute;do com Python. Ouvir o que elas t&amp;ecirc;m feito para mudar o mundo, para revolucionar a tecnologia. E ver que todos, todos mesmo, estavam dispon&amp;iacute;veis e acess&amp;iacute;veis para bater um papo, fosse durante os coffee-breaks (&amp;oacute;timos por sinal), fosse no final do ciclo de palestras, durante o almo&amp;ccedil;o ou at&amp;eacute; enquanto as palestras aconteciam nas salas.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Confesso que at&amp;eacute; perdi algumas palestras interessant&amp;iacute;ssimas porque a conversa estava muito interessante. Mas n&amp;atilde;o me arrependo, extra&amp;iacute; muito conhecimento dessas longas conversas.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;E como foram as palestras?&lt;/h2&gt;
&lt;p&gt;&lt;img src="/static/media/uploads/blog/images/pybr10_pydanny.jpg" width="600" height="450" alt="PyDanny na PythonBrasil 10" title="PyDanny na PythonBrasil 10" /&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Sobre as palestras, como eu disse, qualidade alt&amp;iacute;ssima. A grade foi muito bem montada e as mudan&amp;ccedil;as estavam sempre em tel&amp;otilde;es espalhados pelo hall do local do evento, tudo para voc&amp;ecirc; n&amp;atilde;o perder nada da Python Brasil.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Pra abrir a Python Brasil deste ano, ningu&amp;eacute;m melhor que o &lt;a href="https://twitter.com/fperez_org" target="_blank"&gt;Fernando Perez&lt;/a&gt;, o criador do &lt;a href="http://ipython.org/" target="_blank"&gt;IPython&lt;/a&gt;. Foi uma das melhores apresenta&amp;ccedil;&amp;otilde;es do congresso, na minha opini&amp;atilde;o.&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Entre os outros keynotes estavam &lt;a href="https://twitter.com/alex_gaynor" target="_blank"&gt;Alex Gaynor&lt;/a&gt;, engenheiro de software de diversos projetos Python e membro da diretoria da Python Software Foundation; &lt;a href="https://twitter.com/roguelynn" target="_blank"&gt;Lynn Root&lt;/a&gt;, engenheira do Spotify, que mostrou como eles usam Python no desenvolvimento do player de m&amp;uacute;sica; e o &lt;a href="https://github.com/pydanny" target="_blank"&gt;PyDanny&lt;/a&gt;, co-autor do Two Scoops of Django, al&amp;eacute;m de capoeirista (deu um show &amp;agrave; parte na palestra) e engenheiro na Eventbrite.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Se quiser ver quais foram as outras palestras que rolaram no final de semana acesse a p&amp;aacute;gina da &lt;a href="http://2014.pythonbrasil.org.br/schedule/" target="_blank"&gt;programa&amp;ccedil;&amp;atilde;o&lt;/a&gt;. Um dos palestrantes, Gileno Filho, escreveu um &lt;a href="http://gilenofilho.com.br/minha-pythonbrasil10/" target="_blank"&gt;artigo&lt;/a&gt; muito legal sobre a PythonBrasil e ainda deixou dispon&amp;iacute;vel a apresenta&amp;ccedil;&amp;atilde;o e os links que ele usou de refer&amp;ecirc;ncia.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Concluindo&lt;/h2&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Foi um encontro muito interessante, pude ver o que est&amp;aacute; acontecendo no ecossistema Python pelo pa&amp;iacute;s e fora dele. Al&amp;eacute;m de trocar figurinhas e conhecer novas pessoas que usam Python no dia-a-dia pra criar solu&amp;ccedil;&amp;otilde;es que entregam valor a seus cliente e usu&amp;aacute;rios.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;&amp;Eacute; um evento que recomendo a qualquer um da &amp;aacute;rea de tecnologia, n&amp;atilde;o s&amp;oacute; quem programa em Python ou admira a linguagem, mas pra quem procura uma comunidade ativa e quer estar antenado com as novidades que surgem no meio.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Sem sombra de d&amp;uacute;vida, ir a uma confer&amp;ecirc;ncia &amp;eacute; um investimento pessoal que traz grandes retornos. Al&amp;eacute;m de conhecer as novidades, trocar ideias ou viajar, te traz novo &amp;acirc;nimo pra buscar coisas novas, continuar inovando e trabalhando pela comunidade.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Com certeza estarei na PythonBrasil[11] e voc&amp;ecirc;? Deixe seu coment&amp;aacute;rio!&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;Voc&amp;ecirc; participou da PythonBrasil[10]? Conte sua experi&amp;ecirc;ncia nos coment&amp;aacute;rios tamb&amp;eacute;m!&lt;/p&gt;&lt;/p&gt;</content><category term="pythonbrasil"></category></entry><entry><title>Como criar uma API REST com Django</title><link href="https://andersonberg.github.io/pythonize-pelican/criar-api-rest-django.html" rel="alternate"></link><published>2014-10-05T19:37:02-03:00</published><updated>2014-10-05T19:37:02-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2014-10-05:/pythonize-pelican/criar-api-rest-django.html</id><summary type="html">&lt;p&gt;Como construir uma API Restful totalmente configurável , funcional e simples ?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como tornar essa API pública, ao mesmo tempo que protege seus dados?
E como fazer tudo isso usando Django?&lt;/p&gt;
&lt;p&gt;Como construir uma  &lt;strong&gt;API Restful&lt;/strong&gt;  totalmente  &lt;strong&gt;configurável&lt;/strong&gt; ,  &lt;strong&gt;funcional&lt;/strong&gt;  e  &lt;strong&gt;simples&lt;/strong&gt; ?&lt;/p&gt;
&lt;p&gt;Como tornar essa API &lt;strong&gt;pública&lt;/strong&gt;, ao mesmo tempo que &lt;strong&gt;protege&lt;/strong&gt; seus dados?&lt;/p&gt;
&lt;p&gt;E como fazer tudo isso usando &lt;strong&gt;Django&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Você vai conhecerum pouco do &lt;strong&gt;Tastypie&lt;/strong&gt;, um framework Python muito eficiente que provê uma &lt;a href="http://pt.wikipedia.org/wiki/API"&gt;API&lt;/a&gt; (Application Programming Interface, em português: Interface de Programação de Aplicativos) &lt;a href="http://pt.wikipedia.org/wiki/REST"&gt;REST&lt;/a&gt; totalmente configurável para trabalhar com Django.&lt;/p&gt;
&lt;p&gt;Para acompanharo que vamos apresentar aqui, &lt;strong&gt;não&lt;/strong&gt; é necessário ser expert emDjango. Vamos seguir um &lt;strong&gt;passo-a-passo&lt;/strong&gt; bem simples. Se você já sabe como configurar e usar o Django, pode pular para a parte de configuração do Tastypie, ou utilizar este tutorial como lembrete.&lt;/p&gt;
&lt;p&gt;Se você quer se aprofundar no estudo de Djangorecomendo os seguintes links: &lt;a href="https://docs.djangoproject.com/en/1.6/intro/tutorial01/"&gt;Django Tutorial&lt;/a&gt;, &lt;a href="http://www.tangowithdjango.com/book/"&gt;Tango with Django&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E para aprender mais sobre RESTful webservices, tem um tutorial bem interessante &lt;a href="http://www.restapitutorial.com/"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Como Funciona o Tastypie&lt;/h2&gt;
&lt;p&gt;O Tastypie ajuda você a publicar os models criados no Django, ao mesmo tempo que permite total controle sobre que é exibido ou não. O Tastypie &lt;strong&gt;serializa&lt;/strong&gt; a sa&amp;iacute;da em diversos formatos, incluindo json. Através da criação de objetos 'Resource', o Tastypie implementa formas de obter dados (GET), criar (POST) e modificar (PUT/PATCH) dados e excluir dados (DELETE).&lt;/p&gt;
&lt;p&gt;Com estas dicas, você irá construir uma pequena API pra um exemplo de &lt;strong&gt;microblog&lt;/strong&gt;, como o Twitter.&lt;/p&gt;
&lt;h2&gt;Configurando o ambiente de desenvolvimento&lt;/h2&gt;
&lt;p&gt;Antes de tudo e qualquer coisa, pra não bagunçar o seu ambiente, instale o &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;. O virtualenv é uma ferramenta que cria um ambiente Python &lt;strong&gt;separado&lt;/strong&gt; do seu sistema, evitando maiores dores de cabeça com configurações.&lt;/p&gt;
&lt;p&gt;Para criar um ambiente virtual é bem simples, basta passar o comando virtualenv seguido do diretório onde vai ser armazenado o ambiente, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv venv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, seu ambiente virtual foi instalado na pasta 'venv'. Agora, pra começar a usar é preciso ativar o ambiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você pode perceber que o contexto da sua linha de comando mudou, quer dizer que o ambiente está pronto pra ser usado.&lt;/p&gt;
&lt;h2&gt;Instalação do Tastypie&lt;/h2&gt;
&lt;p&gt;Com o ambiente ativado, agora é a hora de instalar o django, em seguida instale algumas dependências do tastypie e ele próprio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django
$ pip install python-mimeparse lxml defusedxml
$ pip install django-tastypie
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pra maiores detalhes de instalação e configuração, você pode olhar na &lt;a href="http://django-tastypie.readthedocs.org/en/latest/tutorial.html"&gt;documentação&lt;/a&gt; do Tastypie.&lt;/p&gt;
&lt;h2&gt;Criando um projeto Django&lt;/h2&gt;
&lt;p&gt;Com tudo instalado, criar um projeto django e uma aplicação dentro do projeto também é bem fácil:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ django-admin.py startproject webserver
$ &lt;span class="nb"&gt;cd&lt;/span&gt; webserver/webserver
$ python ../manage.py startapp rest_app
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configurando o banco de dados&lt;/h2&gt;
&lt;p&gt;Vamos utilizar como banco de dados o Sqlite, verifique se no seu arquivo settings.py já está habilitado:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;db.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Crie o banco de dados inicial para o Django:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Testando tudo até aqui&lt;/h3&gt;
&lt;p&gt;Pra testar tudo até aqui, você pode iniciar o servidor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E acessar através da url: http://localhost:8000&lt;/p&gt;
&lt;h3&gt;pip freeze&lt;/h3&gt;
&lt;p&gt;O pip tem um comando que cria um registro dos pacotes que foram instalados no ambiente. Isso é útil se você quiser recriar o projeto e ter todos os pacotes nas versões necessárias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Criando a API&lt;/h2&gt;
&lt;h3&gt;Criando uma nova aplicação&lt;/h3&gt;
&lt;p&gt;Você cria um nova aplicação com o comando startapp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$python manage.py startapp rest_app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lembre-se de atualizar o INSTALLED_APPS no seu arquivo settings.py com a aplicação criada.&lt;/p&gt;
&lt;h3&gt;Configuração inicial do Tastypie&lt;/h3&gt;
&lt;p&gt;O primeiro passo é adicionar 'tastypie' em INSTALLED_APPS no arquivo settings.py do seu projeto Django. A documentação do Tastypie diz que essa é a única configuração obrigatória. Para nosso exemplo vai ser suficiente por enquanto.&lt;/p&gt;
&lt;p&gt;Eu tive que fazer uma modificação no settings.py por causa de um problema com autenticação. Não sei se será seu caso, só tive que remover uma linha do MIDDLEWARE_CLASSES:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;#&amp;#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&amp;#39;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Criando seus models&lt;/h3&gt;
&lt;p&gt;O &lt;a href="https://docs.djangoproject.com/en/dev/topics/db/models/"&gt;model&lt;/a&gt; é onde você armazena as informações básicas dos seus dados. Cada model é uma classe Python que herda de django.db.models.Model e que se torna uma tabela no seu banco de dados. Vamos criar alguns models para nossa aplicação.&lt;/p&gt;
&lt;p&gt;Você só precisa criar um model para a nossa aplicação que é a classe que vai conter um post no microblog. A classe de usuário podemos obter do próprio Django.&lt;/p&gt;
&lt;p&gt;Então, edite o seu arquivo models.py e adicione a seguinte classe:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date_created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Este model tem um usuário associado, a data de publicação do post, o próprio texto e um campo chamado &lt;strong&gt;&lt;em&gt;slug&lt;/em&gt;&lt;/strong&gt;, que identifica um determinado post e vai ser útil pra poder fazer buscas.&lt;/p&gt;
&lt;p&gt;Pra personalizar o slug, você precisa sobrescrever o método save() do model. Neste caso, vamos pegar somente os 50 primeiros caracteres do post como slug:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A classe completa fica assim:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tastypie.utils.timezone&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date_created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Criando Resources&lt;/h3&gt;
&lt;p&gt;Tudo certo, mas como eu faço para expor meus dados através da API?&lt;/p&gt;
&lt;p&gt;Você precisa criar &lt;strong&gt;resources&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No Tastypie, resources são os intermediários entre o usuário da sua API e os models de Django.&lt;/p&gt;
&lt;p&gt;Crie o arquivo api.py no diretório da aplicação que você gerou anteriormente:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tastypie.resources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModelResource&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;resource_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Você também tem que criar um resource para a classe de usuário:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;resource_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;E associar um usuário a um post. Logo, é precisoadicionar a seguinte linha na classe PostResource:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;O arquivo api.py completo fica assim:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tastypie.resources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModelResource&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webserver.rest_app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tastypie.authorization&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Authorization&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tastypie&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;resource_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;authorization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;resource_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;authorization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A linha &lt;strong&gt;&lt;em&gt;authorization = Authorization()&lt;/em&gt;&lt;/strong&gt; serve para que você possa criar e modificar elementos na sua API utilizando o cURL, como vai ser mostrado mais a frente.&lt;/p&gt;
&lt;h3&gt;Views e URLs&lt;/h3&gt;
&lt;p&gt;Agora você precisa exibir os resources de alguma forma para que seus usuário tenham acesso à API. Para isso, é necessário criar urls para acessar os seus dados. Edite o arquivo urls.py do seu projeto para que fique assim:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webserver.rest_app.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PostResource&lt;/span&gt;

&lt;span class="n"&gt;post_resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostResource&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^api/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_resource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Você já pode iniciar o &lt;strong&gt;&lt;em&gt;runserver&lt;/em&gt;&lt;/strong&gt; e acessar sua API via URLs, por exemplo:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://127.0.0.1:8000/api/post/?format=json"&gt;http://127.0.0.1:8000/api/post/?format=json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://127.0.0.1:8000/api/post/1/?format=json"&gt;http://127.0.0.1:8000/api/post/1/?format=json&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Acessando a API&lt;/h3&gt;
&lt;p&gt;Você pode interagir com a API usando o &lt;a href="http://curl.haxx.se/"&gt;cURL&lt;/a&gt;. É possível usar uma ferramenta de gerenciamento de banco SQLite, mas você perde a função de criar o slug automaticamente.&lt;/p&gt;
&lt;h4&gt;Recuperando os Dados&lt;/h4&gt;
&lt;p&gt;Para visualizar os dados, ou seja, obter os dados com o curl, o procedimento é semelhante a acessar um URL via browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl http://localhost:8000/api/post/1/?format&lt;span class="o"&gt;=&lt;/span&gt;json
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Enviando Dados&lt;/h4&gt;
&lt;p&gt;Para enviar e criar novos dados, você precisa usar a função POST, como estamos utilizando json, você pode enviar nesse formato da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --dump-header - -H &amp;quot;Content-Type: application/json&amp;quot; -X POST --data &amp;#39;{&amp;quot;text&amp;quot;: &amp;quot;Um post bem rápido&amp;quot;, &amp;quot;user&amp;quot;: &amp;quot;/api/user/1/&amp;quot;}&amp;#39; http://localhost:8000/api/post/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;O estado atual do Tastypie&lt;/h3&gt;
&lt;p&gt;Recentemente, o criador do Tastypie escreveu &lt;a href="http://toastdriven.com/blog/2014/may/23/state-tastypie/"&gt;este artigo&lt;/a&gt; comentando sobre o atual status do Tastypie, não só em termos de desenvolvimento como em popularidade.&lt;/p&gt;
&lt;p&gt;O Tastypie ainda não possui uma versão 1.0, pois existem alguns pontos que precisam ser melhorados. Um deles é o desempenho quando muitos objetos precisam ser serializados.&lt;/p&gt;
&lt;p&gt;Outra questão importante é a incompatibilidade com o Django 1.7 e ele ainda comenta que possui um novo projeto para framework RESTFul, o &lt;a href="https://github.com/toastdriven/restless"&gt;Restless&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Minha intenção com este artigo é apenas mostrar como é simples criar uma API com Python e Django usando o Tastypie, mas existem outras opções que podem ser exploradas e você pode deixar seu comentário se já teve experiência com alguma delas.&lt;/p&gt;</content><category term="rest"></category><category term="django"></category><category term="api"></category></entry><entry><title>Como Criar Scripts SSH Rapidamente com Python</title><link href="https://andersonberg.github.io/pythonize-pelican/criar-scripts-ssh-rapidamente-python.html" rel="alternate"></link><published>2013-05-20T13:45:46-03:00</published><updated>2013-05-20T13:45:46-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2013-05-20:/pythonize-pelican/criar-scripts-ssh-rapidamente-python.html</id><summary type="html">&lt;p&gt;Às vezes é necessário trabalhar com vários dispositivos ligados em rede, quer sejam computadores, roteadores ou outros tipos de equipamentos. Em muitas ocasiões precisamos enviar comandos e instruções para estes equipamentos. Tudo bem entrar em um terminal e enviar um comando ou dois pra um equipamento ou outro. Mas e se forem milhares de dispositivos interconectados?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Às vezes é necessário trabalhar com &lt;strong&gt;vários&lt;/strong&gt; dispositivos ligados em &lt;strong&gt;rede&lt;/strong&gt;, quer sejam computadores, roteadores ou outros tipos de equipamentos.&lt;/p&gt;
&lt;p&gt;Em muitas ocasiões precisamos enviar &lt;strong&gt;comandos&lt;/strong&gt; e &lt;strong&gt;instruções&lt;/strong&gt; para estes equipamentos. Isso geralmente é feito através do envio de comandos ou dados&amp;nbsp;via &lt;strong&gt;SSH&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tudo bem entrar em um terminal e enviar um comando ou dois pra um equipamento ou outro.&lt;/p&gt;
&lt;p&gt;Mas e se forem &lt;strong&gt;milhares&lt;/strong&gt; de dispositivos interconectados?&lt;/p&gt;
&lt;p&gt;Ou se são &lt;strong&gt;dezenas&lt;/strong&gt; ou &lt;strong&gt;centenas&lt;/strong&gt; de instruções em série?&lt;/p&gt;
&lt;p&gt;E se estas duas situações ocorrem &lt;strong&gt;juntas&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Nesses casos é preciso criar scripts que façam tudo automatizado.&lt;/p&gt;
&lt;p&gt;Neste artigo vou compartilhar minha experiência com o Paramiko, um módulo Python que fornece uma interface ao protocolo SSH2.&lt;/p&gt;
&lt;p&gt;SSH é um protocolo de rede criptografado que realiza conexão segura entre computadores e permite executar comandos remotamente. Em diversas situações é necessário automatizar o processo de conexão e execução de comandos em um computador remoto.&lt;/p&gt;
&lt;h2&gt;Como instalar o Paramiko&lt;/h2&gt;
&lt;p&gt;Para instalar o Paramiko é necessário instalar antes o PyCrypto, que pode ser encontrado via easy_install ou no repositório da sua distribuição Linux. Encontrei algumas dificuldades para instalar o pycrypto no Windows, por sorte existem alguns binários compilados do pycrypto: &lt;a href="http://www.voidspace.org.uk/python/modules.shtml#pycrypto" target="_blank" title="PyCrypto Windows"&gt;http://www.voidspace.org.uk/python/modules.shtml#pycrypto&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Depois é só instalar o paramiko via easy_install ou procurando no repositório da distro Linux.&lt;/p&gt;
&lt;p&gt;O paramiko tem uma classe base que fornece toda a interface para comunicação: &lt;strong&gt;&lt;em&gt;paramiko.SSHClient&lt;/em&gt;&lt;/strong&gt;. Para criar um objeto e criar uma conexão com um servidor é bem simples:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSHClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anderson&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;123&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Neste exemplo, a função 'connect' está conectando ao servidor SSH local, passando nome de usuário e senha através dos par&amp;acirc;metros 'username' e 'password', respectivamente.&lt;/p&gt;
&lt;p&gt;Quando você conecta em um servidor ssh pela primeira vez, uma chave é automaticamente armazenada em disco num arquivo chamado "&lt;strong&gt;&lt;em&gt;.ssh/known_hosts&lt;/em&gt;&lt;/strong&gt;" na sua pasta home. Para isto é preciso o usuário, manualmente, aceitar o armazenamento da chave do servidor, confirmando a confiabilidade deste. Para fazermos isso automaticamente através do Paramiko, utilizamos o objeto "set_missing_host_key_policy", passando "&lt;strong&gt;&lt;em&gt;paramiko.AutoAddPolicy()&lt;/em&gt;&lt;/strong&gt;" como parâmetro para aceitar automaticamente as chaves. Então, nosso código anterior pode ser modificado:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSHClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_missing_host_key_policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoAddPolicy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anderson&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;123&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Tenha o cuidado de somente utilizar este artifício com servidores que você confia.&lt;/p&gt;
&lt;h2&gt;Enviando comandos via ssh&lt;/h2&gt;
&lt;p&gt;Já aprendemos como conectar em um computador remotamente via ssh. Agora vamos ver como enviar comandos e receber os resultados destes comandos. Isto é feito com o método "exec_command" do SSHClient(). Este método retorna uma tupla de objetos (stdin, stdout, stderr) que você pode ler (no caso do stdout e stderr) ou escrever (stdin). A sintaxe para executar um comando é a seguinte:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Que vai enviar o comando 'ls' para listar os arquivos do diretório atual. Para exibir o retorno deste comando podemos ler o conte&amp;uacute;do do objeto stdout e, em seguida, fechar a conexão ssh:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Em alguns casos precisamos enviar outras informações para execução do comando, como por exemplo uma senha de administrador. Podemos fazer isto escrevendo no objeto stdin.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sudo fdisk -l&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1234&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;O retorno dos comando pode ser tratado com as poderosas ferramentas de manipulação de string de Python, ou ainda filtradas com expressões regulares, dando ainda mais opções ao programador na hora de criar um script completo. Em outro post darei mais detalhes sobre a utilização do Paramiko.&lt;/p&gt;</content><category term="ssh"></category><category term="script"></category></entry><entry><title>Como Recuperar Posts do Twitter Rapidamente com Python</title><link href="https://andersonberg.github.io/pythonize-pelican/recuperar-posts-twitter-rapidamente-python.html" rel="alternate"></link><published>2012-02-07T18:00:00-03:00</published><updated>2012-02-07T18:00:00-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2012-02-07:/pythonize-pelican/recuperar-posts-twitter-rapidamente-python.html</id><summary type="html">&lt;p&gt;Neste post vamos criar um crawler para recuperar tweets públicos. Tweets públicos são aqueles que não necessitam de autenticação, ou seja, não é necessário ter uma conta no Twitter para ler esses tweets.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Neste post vamos criar um &lt;strong&gt;crawler&lt;/strong&gt; para recuperar &lt;strong&gt;tweets&lt;/strong&gt; públicos. Tweets públicos são aqueles que não necessitam de autenticação, ou seja, não é necessário ter uma conta no Twitter para ler esses tweets.&lt;/p&gt;
&lt;p&gt;Com Python, é bem simples recuperar qualquer status do Twitter, para isso, vamos utilizar o pacote &lt;a href="http://code.google.com/p/python-twitter/" target="_blank" title="python-twitter"&gt;python-twitter&lt;/a&gt;, que pode ser instalado via setuptools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ easy_install python-twitter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou, pode ser baixado neste &lt;a href="http://code.google.com/p/python-twitter/downloads/list"&gt;link&lt;/a&gt;. Para instalar, extraia o conteúdo, vá até a pasta onde foi extraído e faça:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py build
$ python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O python-twitter provê acesso a API do Twitter via código Python.&lt;/p&gt;
&lt;p&gt;Para ler a Api e buscar ajuda, faça:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pydoc twitter.Status
$ pydoc twitter.User
$ pydoc twitter.DirectMessage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para começar a utilizar o python-twitter, basta importar o pacote e criar uma instância da classe twitter.Api():&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;twitter&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Então, é possível obter os últimos tweets públicos facilmente com a função &lt;em&gt;GetPublicTimeline&lt;/em&gt;, que retorna uma lista contendo em torno de 20 objetos do tipo &lt;em&gt;twitter.Status&lt;/em&gt;, o texto do tweet em si está no atributo &lt;em&gt;text&lt;/em&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPublicTimeline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Agora, para recuperar os 20 últimos tweets de um usuário específico, existe a função &lt;em&gt;GetUserTimeline&lt;/em&gt;. Trocando '&lt;em&gt;user&lt;/em&gt;' por um usuário real do twitter no código abaixo, você obtém uma lista semelhante a que foi retornada pela função&amp;nbsp;&lt;em&gt;GetPublicTimeline:&lt;/em&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;user_tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetUserTimeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_tweets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A função &lt;em&gt;GetUserTimeline &lt;/em&gt;permite configurar a quantidade de tweets a serem recuperados através do parâmetro &lt;em&gt;count:&lt;/em&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;user_tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetUserTimeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;user_tweets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;user_tweets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Neste código utilizei a função &lt;em&gt;encode&lt;/em&gt; para imprimir caracteres especiais em português.&lt;/p&gt;
&lt;p&gt;Você pode encontrar mais detalhes das funções mostradas aqui na documentação da API, basta fazer no terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pydoc twitter.Api
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que você achou de usar a API do Twitter com Python?
Já tentou outras formas de acessar a API?
Deixe seu comentário logo abaixo!&lt;/p&gt;</content></entry><entry><title>Python - Dividindo uma Lista em N Partes</title><link href="https://andersonberg.github.io/pythonize-pelican/python-dividindo-lista-n-partes.html" rel="alternate"></link><published>2012-01-18T01:52:26-03:00</published><updated>2012-01-18T01:52:26-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2012-01-18:/pythonize-pelican/python-dividindo-lista-n-partes.html</id><summary type="html">&lt;p&gt;frequentemente eu uso esse código, então ao invés de ir no código antigo vou neste post.Basicamente o que eu quero é o seguinte: Tenho uma lista e quero dividir em n partes quase-iguais. Explico&lt;/p&gt;</summary><content type="html">&lt;p&gt;frequentemente eu uso esse c&amp;oacute;digo, ent&amp;atilde;o ao inv&amp;eacute;s de ir no c&amp;oacute;digo antigo vou neste post.&lt;br /&gt;Basicamente o que eu quero &amp;eacute; o seguinte: Tenho uma lista e quero dividir em n partes quase-iguais. Explico&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Suponha a lista [1,2,3,4,5,6,7,8,9,10] quero dividir a lista em 5 partes.&lt;/p&gt;

&lt;p&gt;A divis&amp;atilde;o da lista resultaria em [1,2], [3,4], [5,6], [7,8], [9,10]&lt;/p&gt;

&lt;p&gt;Ok, isso &amp;eacute; chato de fazer...&lt;/p&gt;

&lt;p&gt;Mas vamos ao c&amp;oacute;digo.&lt;/p&gt;

&lt;h2&gt;A lista&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lista = [1,2,3,4,5,6,7,8,9,10]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;quebrando tudo:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;quebrador&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lista&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;partes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lista&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;parte&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lista&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;partes&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;parte&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lista&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;partes&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;parte&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;quebrador&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lista&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;quebrador&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lista&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;quebrador&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lista&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;quebrador&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lista&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&amp;Eacute; poss&amp;iacute;vel que ocorrram varia&amp;ccedil;&amp;otilde;es para o tipo de lista.&lt;/p&gt;

&lt;p&gt;original: &lt;a href="http://romulojales.com/python-dividindo-uma-lista-em-n-partes" title="http://romulojales.com/python-dividindo-uma-lista-em-n-partes"&gt;http://romulojales.com/python-dividindo-uma-lista-em-n-partes&lt;/a&gt;&lt;/p&gt;</content><category term="listas"></category></entry><entry><title>Python e lambda</title><link href="https://andersonberg.github.io/pythonize-pelican/python-lambda.html" rel="alternate"></link><published>2012-01-16T02:12:27-03:00</published><updated>2012-01-16T02:12:27-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2012-01-16:/pythonize-pelican/python-lambda.html</id><summary type="html">&lt;p&gt;Sabe lambda? Lambda é algo muito legal. Com lambda você pode criar em tempo de execução funções e fazer algumas graças.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sabe lambda? Lambda &amp;eacute; algo muito legal. Com lambda voc&amp;ecirc; pode criar em tempo de execu&amp;ccedil;&amp;atilde;o fun&amp;ccedil;&amp;otilde;es e fazer algumas gra&amp;ccedil;as.&lt;/p&gt;

&lt;p&gt;Vejamos algo bonito com lambda. Suponha a fun&amp;ccedil;&amp;atilde;o fatorial.&lt;/p&gt;

&lt;p&gt;A fun&amp;ccedil;&amp;atilde;o fatorial &amp;eacute; definida tal que dado um n&amp;uacute;mero x o fatorial deste n&amp;uacute;mero &amp;eacute;:&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;x*(x-n) com n variando de (x-1) at&amp;eacute; 1.&lt;/p&gt;

&lt;p&gt;Logo podemos traduzir num c&amp;oacute;digo python:&lt;/p&gt;

&lt;pre&gt;&lt;br /&gt;def fatorial(x):&lt;br /&gt; if x&amp;lt;=1:&lt;br /&gt; return 1&lt;br /&gt; else:&lt;br /&gt; return x*fatorial(x-1)&lt;/pre&gt;

&lt;p&gt;Esse c&amp;oacute;digo usa recurs&amp;atilde;o, espero que voc&amp;ecirc; saiba o que &amp;eacute; recurs&amp;atilde;o... ;)&lt;/p&gt;

&lt;p&gt;Bom, com lambda esse mesmo c&amp;oacute;digo pode ter apenas uma linha, duvida?&lt;/p&gt;

&lt;pre&gt;&lt;br /&gt;fatorial = lambda x: 1 if x &amp;lt;=1 else x*fatorial(x-1)&lt;/pre&gt;

&lt;p&gt;Definimos em fatorial uma fun&amp;ccedil;&amp;atilde;o que executa o calculo de um fatorial de um dado n&amp;uacute;mero x.&lt;/p&gt;

&lt;p&gt;Agora abra o seu interpratador python copie e cole o c&amp;oacute;digo para testar. N&amp;eacute; lindo?&lt;/p&gt;

&lt;p&gt;Python tanto na vers&amp;atilde;o 2 quanto na vers&amp;atilde;o 3 define lambda com um atalho para cria&amp;ccedil;&amp;atilde;o de fun&amp;ccedil;&amp;otilde;es. A sintaxe &amp;eacute; definida assim:&lt;/p&gt;

&lt;pre&gt;&lt;strong id="grammar-token-lambda_form"&gt;lambda_form &lt;/strong&gt; ::= "lambda" [&lt;a href="http://docs.python.org/reference/compound_stmts.html#grammar-token-parameter_list"&gt;&lt;tt&gt;parameter_list&lt;/tt&gt;&lt;/a&gt;]: &lt;a href="http://docs.python.org/reference/expressions.html#grammar-token-expression"&gt;&lt;tt&gt;expression&lt;/tt&gt;&lt;/a&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre id="index-1018"&gt;&lt;strong id="grammar-token-old_lambda_form"&gt;old_lambda_form&lt;/strong&gt; ::=  "lambda" [&lt;a href="http://docs.python.org/reference/compound_stmts.html#grammar-token-parameter_list"&gt;&lt;tt&gt;parameter_list&lt;/tt&gt;&lt;/a&gt;]: &lt;a href="http://docs.python.org/reference/expressions.html#grammar-token-old_expression"&gt;&lt;tt&gt;old_expression&lt;/tt&gt;&lt;/a&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;Vou ler para voc&amp;ecirc;: uma express&amp;atilde;o lambda &amp;eacute; formada pela palavra reservada lambda seguida por uma lista (n&amp;atilde;o o objeto lista) de parametros seperada por ":" e a express&amp;atilde;o.&lt;/p&gt;

&lt;p&gt;No nosso c&amp;oacute;digo a cima, fatorial &amp;eacute; o nome da express&amp;atilde;o lambda. O python sabe que a fun&amp;ccedil;&amp;atilde;o &amp;eacute; um lambda porque voc&amp;ecirc; disse isso usando a string lambda logo no inicio da express&amp;atilde;o.&lt;/p&gt;

&lt;p&gt;O x &amp;eacute; o parametro. Se voc&amp;ecirc; quisesse passar mais parametros, bastava separa-lo por virgulas. Assim:&lt;/p&gt;

&lt;pre&gt;&lt;br /&gt;funcao = lambda x,y,z: x+y+z&lt;/pre&gt;

&lt;p&gt;pergunta, qual o retorno de funcao(1,2,3) ?&lt;/p&gt;

&lt;p&gt;Agora a parte mais dif&amp;iacute;cil, a express&amp;atilde;o.&lt;/p&gt;

&lt;p&gt;A express&amp;atilde;o &amp;eacute; como voc&amp;ecirc; vai manipular os parametros para ter um retorno. Com lambda n&amp;atilde;o &amp;eacute; necess&amp;aacute;rio por a palavra reservada return.&lt;/p&gt;

&lt;p&gt;Essa express&amp;atilde;o s&amp;oacute; pode ser de tr&amp;ecirc;s formas:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Uma comando de uma linha (x+1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;outra express&amp;atilde;o lambda.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Ou uma express&amp;atilde;o condicional. (incluem testes de l&amp;oacute;gica [or, and, not] )&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;No fatorial eu usei uma express&amp;atilde;o condicional. Na funcao eu usei uma express&amp;atilde;o de uma linha. E poderia usar outra express&amp;atilde;o lambda.&lt;/p&gt;

&lt;p&gt;Mas para memorizar, voc&amp;ecirc; deve escrever a sua express&amp;atilde;o sempre com uma linha.&lt;/p&gt;

&lt;p&gt;Voc&amp;ecirc; pode fazer uso de recurs&amp;atilde;o e uso avan&amp;ccedil;ados de exepress&amp;atilde;o.&lt;/p&gt;

&lt;p&gt;original :&lt;a href="http://romulojales.com/python-e-lambda/"&gt; http://romulojales.com/python-e-lambda/&lt;/a&gt;&lt;/p&gt;</content><category term="lambda"></category></entry><entry><title>6 dicas simples para o Vim ser uma IDE perfeita pra Python</title><link href="https://andersonberg.github.io/pythonize-pelican/dicas-simples-vim-ide-python.html" rel="alternate"></link><published>2012-01-10T13:43:24-03:00</published><updated>2012-01-10T13:43:24-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2012-01-10:/pythonize-pelican/dicas-simples-vim-ide-python.html</id><summary type="html">&lt;p&gt;Qual programador não procura um ambiente de desenvolvimento que seja simples, amigável e funcional?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Qual programador não procura um ambiente de desenvolvimento que seja &lt;strong&gt;simples&lt;/strong&gt;, &lt;strong&gt;amigável&lt;/strong&gt; e &lt;strong&gt;funcional&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Muitos acabam voltando ao bloco de notas por sua &lt;strong&gt;simplicidade&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Neste post você vai explorar o Vim, um editor de texto que roda na linha de comando e é a paixão de muitos desenvolvedores.&lt;/p&gt;
&lt;p&gt;Em um &lt;a href="http://www.pythonize.org/programando-em-python-no-vim/" title="Programando em Python no Vim"&gt;post anterior&lt;/a&gt; eu falei sobre como habilitar o auto-complete no vim pra código em python. Neste post vamos um pouco mais além nessas configurações&lt;/p&gt;
&lt;p&gt;Recentemente encontrei um &lt;a href="http://dancingpenguinsoflight.com/2009/02/python-and-vim-make-your-own-ide/"&gt;post num blog&lt;/a&gt; com dicas mostrando como tornar o vim numa IDE completa pra Python.&lt;/p&gt;
&lt;p&gt;Testei algumas funcionalidades que tornaram o vim bem amigável pra programar e gerenciar código. Fiz todos os testes no Ubuntu, em outros sistemas Linux deve ser similar. Neste post vou passar essa experiência que tive configurando e usando o vim para criar código python.&lt;/p&gt;
&lt;p&gt;Antes de tudo, instale os pacotes vim-full e vim-python se estiverem disponíveis nos repositórios do seu sistema. As configuração no vim são feitas num arquivo chamado vimrc, nas últimas versões do Ubuntu ele fica localizado na pasta /etc/vim e precisa ser root para modificá-lo.&lt;/p&gt;
&lt;h3&gt;1. Destaque de código no Vim&lt;/h3&gt;
&lt;p&gt;Para habilitar highlighting (destaque do código) no vim adicione a seguinte linha no arquivo vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;syntax on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No seu arquivo vimrc pode ser que esta linha venha comentada e acompanhada das seguintes linhas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if has(&amp;quot;syntax&amp;quot;)
    syntax on
endif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basta descomentar estas linhas que o highlighting ficará disponível.&lt;/p&gt;
&lt;h3&gt;2. Indentação de código&lt;/h3&gt;
&lt;p&gt;Como a indentação em Python é fundamental, sem ela podem ocorrer erros no código, uma ide que  tenha auto-indentação é ideal.  No arquivo vimrc procure as seguintes linhas e descomente ou adicione se elas já não estiverem no arquivo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot; Habilita auto-indentação
if has(&amp;quot;autocmd&amp;quot;)
  filetype plugin indent on
endif
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Número de linhas&lt;/h3&gt;
&lt;p&gt;Para exibir o número das linhas no vim adicione o seguinte no vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; Habilitar número de linhas&lt;/span&gt;
&lt;span class="s"&gt;set number&lt;/span&gt;

&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;Alternar&lt;/span&gt; &lt;span class="n"&gt;exibição&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;número&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;linhas&lt;/span&gt; (&lt;span class="n"&gt;facilita&lt;/span&gt; &lt;span class="n"&gt;na&lt;/span&gt; &lt;span class="n"&gt;hora&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;copiar&lt;/span&gt;)
&lt;span class="n"&gt;nnoremap&lt;/span&gt;  :&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;nonumber&lt;/span&gt;!: &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;foldcolumn&lt;/span&gt;=&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O resultado é este:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/vimpython.jpg" width="372" height="118" title="Vim com highlighting e número de linhas" alt="Vim com highlighting e número de linhas"&gt;&lt;/p&gt;
&lt;h3&gt;4. Navegação pelo código&lt;/h3&gt;
&lt;p&gt;Uma funcionalidade muito útil é a navegação pelo código. Com esta ferramenta habilitada é possível ver todas as classes e funções presentes no seu código e poder pular automaticamente pra qualquer uma delas.&lt;/p&gt;
&lt;p&gt;Primeiro, é preciso instalar o pacote &lt;a href="http://ctags.sourceforge.net/"&gt;exuberant-ctags&lt;/a&gt;, disponível no repositório com este mesmo nome. Depois, baixe o &lt;a href="http://www.vim.org/scripts/script.php?script_id=273"&gt;taglist&lt;/a&gt;, que é um plugin do vim. Coloque o arquivo taglist.vim na pasta \~/.vim/plugin e o taglist.txt na pasta \~/.vim/doc, vá até esta última pasta, inicie o vim e rode :helptags. (com '.' no final) e já estará instalado.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/vim-explorer.jpg" width="858" height="100" title="Vim Explorer" alt="Vim Explorer"&gt;&lt;/p&gt;
&lt;p&gt;Agora é preciso fazer algumas alterações no vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot; Exibe nome da função
let g:ctags_statusline=1
&amp;quot; Inicializar script automaticamente
let generate_tags=1
&amp;quot; Exibe os resultados em uma janela vertical
let Tlist_Use_Horiz_Window=0
&amp;quot; Atalho para exibição da Taglist
nnoremap TT :TlistToggle
map  :TlistToggle
&amp;quot; Configurações para exibição da Taglist
let Tlist_Use_Right_Window = 1
let Tlist_Compact_Format = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_File_Fold_Auto_Close = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A Taglist estará disponível através do atalho F4 ou digitando "TT" (dois 't' maiúsculos) As últimas configurações servem para exibir uma janela vertical à direita mostrando a taglist e ganhar foco quando é chamada.&lt;/p&gt;
&lt;h3&gt;5. Ocultar Código&lt;/h3&gt;
&lt;p&gt;Quando o seu código começa a ter muitas funções e classes fica difícil ter uma visão geral do que está disponível no código. A maioria das IDE's possuem uma funcionalidade para ocultar parte do código e mostrar somente a assinatura ou definição de classes e funções.&lt;/p&gt;
&lt;p&gt;No Vim isso é possível através de um &lt;a href="http://www.vim.org/scripts/script.php?script_id=1494"&gt;plugin&lt;/a&gt;. Para instalá-lo baixe o arquivo &lt;a href="http://www.vim.org/scripts/script.php?script_id=1494"&gt;neste link&lt;/a&gt;, crie uma pasta chamada ftplugin dentro da pasta \~/.vim e copie o plugin para a pasta ftplugin. A tecla 'F' (&amp;lt;Shift&amp;gt; + f) oculta ou exibe todo o código dentro de funções e classes, enquanto que a tecla 'f'' exibe ou oculta o código onde está o cursor.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/vim-code-folding.jpg" width="843" height="146" title="Vim Code Folding" alt="Vim Code Folding"&gt;&lt;/p&gt;
&lt;h3&gt;6. Project Explorer&lt;/h3&gt;
&lt;p&gt;Essa é uma das principais funções de uma IDE: organizar seu projeto. No Vim é preciso instalar o plugin &lt;a href="http://www.vim.org/scripts/script.php?script_id=1658"&gt;NerdTree&lt;/a&gt;, que pode ser baixado &lt;a href="http://www.vim.org/scripts/script.php?script_id=1658"&gt;aqui&lt;/a&gt;. Para instalar basta extrair o conteúdo do arquivo .zip na pasta \~/.vim. Rode  :helptags. (com '.' no final) e rode :help NERD_tree.txt para ver o arquivo de ajuda. Pra utilizar o plugin digite :NERDTree e será aberta uma janela com o conteúdo da pasta atual.&lt;/p&gt;
&lt;p&gt;Na &lt;a href="http://www.vim.org/scripts/index.php"&gt;página de scripts&lt;/a&gt; do vim, você pode encontrar outros plugins de Python para o vim. Se você testar algum outro plugin ou tiver uma funcionalidade interessante que eu não comentei no post, deixe sua experiência nos comentários.&lt;/p&gt;</content><category term="vim"></category><category term="ide"></category></entry><entry><title>Como criar parsers HTML poderosos com BeautifulSoup</title><link href="https://andersonberg.github.io/pythonize-pelican/criar-parsers-html-beautifulsoup.html" rel="alternate"></link><published>2011-12-31T15:45:19-03:00</published><updated>2011-12-31T15:45:19-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2011-12-31:/pythonize-pelican/criar-parsers-html-beautifulsoup.html</id><summary type="html">&lt;p&gt;Neste post você vai aprender como criar um parser pra recuperar informações de páginas HTML utilizando o BeautifulSoup. O BeautifulSoup pode ser usado para arquivos HTML ou XML, com ele fica muito simples navegar e buscar textos em páginas HTML. Uma grande vantagem da BeautifulSoup é que ela consegue criar uma estrutura mesmo com páginas html mal formatadas, facilitando o trabalho do programador.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Neste post você vai aprender como criar um parser pra recuperar
informações de páginas HTML utilizando o BeautifulSoup. O BeautifulSoup
pode ser usado para arquivos HTML ou XML, com ele fica muito simples
navegar e buscar textos em páginas HTML. Uma grande vantagem da
BeautifulSoup é que ela consegue criar uma estrutura mesmo com páginas
html mal formatadas, facilitando o trabalho do programador.&lt;/p&gt;
&lt;h2&gt;Instalando o BeautifulSoup&lt;/h2&gt;
&lt;p&gt;Você pode fazer a instalação via &lt;em&gt;pip&lt;/em&gt; ou &lt;em&gt;easy_install&lt;/em&gt;. Também estão
disponíveis pacotes em diferentes distribuições Linux.&lt;/p&gt;
&lt;p&gt;Inicie o interpretador Python para testar os códigos que vamos
apresentar a seguir.&lt;/p&gt;
&lt;p&gt;Para processar páginas HTML, importe o BeautifulSoup da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se você for processar arquivos XML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulStoneSoup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você pode também consultar a documentação do BeautifulSoup
&lt;a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/" title="BeautifulSoup"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Criando o parser&lt;/h2&gt;
&lt;p&gt;Por enquanto vamos processar apenas páginas html. Vamos usar a biblioteca urllib2 para recuperar uma página html.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;
&lt;span class="n"&gt;pagina&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.globo.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso vai criar uma string com todo o código html da página. Então, para criar o parser basta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;soup = BeautifulSoup(pagina)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É possível transformar esse objeto BeautifulSoup em string com o método
prettify, que manipula o código bruto adicionando quebra de linha e
espaçamento recriando a estrutura do código html.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;soup.prettify()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para listar todos os links da página recuperada, usamos o método
findAll:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;links = soup.findAll(&amp;#39;a&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neste código, '&lt;em&gt;links&lt;/em&gt;' é uma lista contendo objetos do tipo Tag da
biblioteca BeautifulSoup (class BeautifulSoup.Tag). Vamos agora, listar
somente os links (tirando qualquer texto ou marcação) que estão nesses
objetos Tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for link in links:
    print link[&amp;#39;href&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para recuperar somente uma área da página, é possível usar o método find
com o parâmetro id, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;colunas = soup.find(id=&amp;quot;glb-area-colunas&amp;quot;)
linkscol = colunas.findAll(&amp;#39;a&amp;#39;)
for link in linkscol:
    print link[&amp;#39;href&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A biblioteca BeautifulSoup facilita muito na hora de criar parsers e
crawlers para páginas html ou xml. Usada junto com o urllib2 são
poderosos aliados na recuperação de informação na web.&lt;/p&gt;</content><category term="parser"></category><category term="html"></category></entry><entry><title>Palestra sobre canivete suíço de Python</title><link href="https://andersonberg.github.io/pythonize-pelican/palestra-canivete-suico-python.html" rel="alternate"></link><published>2011-12-04T03:32:34-03:00</published><updated>2011-12-04T03:32:34-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2011-12-04:/pythonize-pelican/palestra-canivete-suico-python.html</id><summary type="html">&lt;p&gt;Esta semana tive a oportunidade de ministrar uma palestra para os alunos da Farec (Faculdade do Recife) falando sobre o Python, incluindo biblioteca padrão, pacotes e frameworks úteis para todo tipo de projeto. Fiz um apanhado geral de Python para que os alunos se interessassem um pouco mais pela linguagem. A seguir estão os slides:&lt;/p&gt;</summary><content type="html">&lt;p&gt;Esta semana tive a oportunidade de ministrar uma palestra para os alunos da Farec (Faculdade do Recife) falando sobre o Python, incluindo biblioteca padrão, pacotes e frameworks úteis para todo tipo de projeto. Fiz um apanhado geral de Python para que os alunos se interessassem um pouco mais pela linguagem. A seguir estão os slides:&lt;!--more--&gt;&lt;/p&gt;
&lt;iframe width="425" height="355" style="border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;" src="//www.slideshare.net/slideshow/embed_code/10451349" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen=""&gt;&lt;/iframe&gt;

&lt;div style="margin-bottom: 5px;"&gt;&lt;strong&gt; &lt;a href="//pt.slideshare.net/berg_pe/canivete-python" title="Canivete python" target="_blank"&gt;Canivete python&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/berg_pe" target="_blank"&gt;Anderson Dantas&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;</content><category term="canivete"></category><category term="suíço"></category></entry><entry><title>Tutorial básico de NumPy</title><link href="https://andersonberg.github.io/pythonize-pelican/tutorial-basico-numpy.html" rel="alternate"></link><published>2011-10-25T17:00:38-03:00</published><updated>2011-10-25T17:00:38-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2011-10-25:/pythonize-pelican/tutorial-basico-numpy.html</id><summary type="html">&lt;p&gt;NumPy é um pacote de Python que suporta operações com vetores e matrizes e é essencial para a computação científica com Python. O NumPy é baseado em C, portanto tem um desempenho superior se comparado às operações com vetores originais do Python. Neste post eu quero mostrar uma introdução básica ao NumPy para os iniciantes.&lt;/p&gt;</summary><content type="html">&lt;p&gt;NumPy é um pacote de Python que suporta operações com vetores e matrizes e é essencial para a computação científica com Python. O NumPy é baseado em C, portanto tem um desempenho superior se comparado &amp;agrave;s opera&amp;ccedil;&amp;otilde;es com vetores originais do Python. Neste post eu quero mostrar uma introdu&amp;ccedil;&amp;atilde;o b&amp;aacute;sica ao NumPy para os iniciantes.&lt;/p&gt;
&lt;h3&gt;INSTALA&amp;Ccedil;&amp;Atilde;O DO NUMPY&lt;/h3&gt;
&lt;p&gt;Primeiro vamos instalar o NumPy. No Windows, basta baixar a &amp;uacute;ltima vers&amp;atilde;o do numpy no site do &lt;a href="http://sourceforge.net/projects/numpy/files/NumPy/"&gt;SourceForge&lt;/a&gt; e instalar facilmente com o arquivo .exe. No Linux, instale o pacote "python-numpy" disponível nos repositórios da sua distribuição ou use o pip: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install numpy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, agora &amp;eacute; s&amp;oacute; abrir o console Python e importar o pacote:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;CRIA&amp;Ccedil;&amp;Atilde;O DE UM ARRAY NUMPY&lt;/h3&gt;

&lt;p&gt;Para criar um array, &amp;eacute; bem simples:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A fun&amp;ccedil;&amp;atilde;o &lt;em&gt;array&lt;/em&gt; do NumPy, recebe uma lista de Python e transforma em um array NumPy. Voc&amp;ecirc; pode checar o tipo:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;E o tipo dos elementos:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Para criar matrizes multidimensionais &amp;eacute; bem simples tamb&amp;eacute;m:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A fun&amp;ccedil;&amp;atilde;o &lt;em&gt;arange&lt;/em&gt; &amp;eacute; bem parecida com a fun&amp;ccedil;&amp;atilde;o &lt;em&gt;range&lt;/em&gt;, s&amp;oacute; que retorna um array ao inv&amp;eacute;s de uma lista:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;11.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;7.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;8.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&amp;Eacute; poss&amp;iacute;vel definir mais par&amp;acirc;metros pra fun&amp;ccedil;&amp;atilde;o &lt;em&gt;arange&lt;/em&gt;:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#(limite inferior, limite superior, passo)&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;TAMANHO DO ARRAY&lt;/h3&gt;

&lt;p&gt;A propriedade &lt;em&gt;shape&lt;/em&gt; mostra o tamanho de cada dimens&amp;atilde;o da matriz:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&amp;Eacute; poss&amp;iacute;vel, tamb&amp;eacute;m, modificar essa propriedade:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;ACESSANDO ELEMENTOS&lt;/h3&gt;

&lt;p&gt;Para acessar elementos:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&amp;Eacute; poss&amp;iacute;vel acessar v&amp;aacute;rios elementos ao mesmo tempo:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;div class="wp-caption alignright" id="attachment_175"&gt;&lt;/div&gt;

&lt;div class="wp-caption alignright"&gt;&lt;img src="/static/media/uploads/blog/images/matriz.jpg" width="353" height="346" alt="Matriz numpy" title="Matriz numpy" /&gt;&lt;/div&gt;

&lt;div class="wp-caption alignright"&gt;Fonte: SciPy 2011 - Jonathan Rocher&lt;/div&gt;

&lt;div class="wp-caption alignright" id="attachment_175"&gt;
&lt;p class="wp-caption-text"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;MATRIZ TRANSPOSTA&lt;/h3&gt;

&lt;p&gt;Para obter a matriz transposta existem duas formas:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;OUTRAS FUN&amp;Ccedil;&amp;Otilde;ES IMPORTANTES DO NUMPY&lt;/h3&gt;

&lt;p&gt;A fun&amp;ccedil;&amp;atilde;o &lt;em&gt;sum&lt;/em&gt; soma todos os elementos do array:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;66&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Podemos usar o par&amp;acirc;metro axis e determinar em qual eixo queremos a soma:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Alternativamente, podemos usar o m&amp;eacute;todo &lt;em&gt;sum&lt;/em&gt;:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;66&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;As fun&amp;ccedil;&amp;otilde;es amin e amax retornam o valor m&amp;iacute;nimo e o valor m&amp;aacute;ximo do array, respectivamente:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;3.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;33.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;8.&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;3.4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;33.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;argmin&lt;/em&gt; e &lt;em&gt;argmax&lt;/em&gt; retornam o &amp;iacute;ndice do menor valor e do maior valor do array, respectivamente:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;O atributo&amp;nbsp;&lt;em&gt;flat&lt;/em&gt;&amp;nbsp;retorna um iterator que permite acessar elementos de um array multidimensional como se ele fosse uma lista:&lt;/p&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flat&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Existem ainda outras diversas fun&amp;ccedil;&amp;otilde;es que podemos explorar em outro post.&lt;/p&gt;</content><category term="numpy"></category><category term="matriz"></category><category term="matrizes"></category></entry><entry><title>Entendendo Decorators de forma simples</title><link href="https://andersonberg.github.io/pythonize-pelican/entendendo-decorators-de-forma-simples.html" rel="alternate"></link><published>2011-10-24T00:58:57-03:00</published><updated>2011-10-24T00:58:57-03:00</updated><author><name>Rômulo Jales</name></author><id>tag:andersonberg.github.io,2011-10-24:/pythonize-pelican/entendendo-decorators-de-forma-simples.html</id><summary type="html">&lt;p&gt;O que é quando usar um decorator:&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sabe aquele trecho de código que vive se repetindo no seu código e você acha um saco ter repetir? Imagine que esse trecho repetido necessite uma refatoração e imagine que seu projeto é grande você já começa a vislumbrar um cenário caótico.&lt;/p&gt;
&lt;p&gt;Sabe aquele trecho de código que vive se repetindo no seu código e você acha um saco ter repetir? Imagine que esse trecho repetido necessite uma refatoração e imagine que seu projeto é grande você já começa a vislumbrar um cenário caótico.&lt;/p&gt;
&lt;p&gt;As boas práticas de programação tentam prevenir este tipo de problema. Mas tem horas que nem o seu mega modelo resolve. Um caso simples é quando o trecho de código que se repete necessita de parametrização ou muda de acordo com o contexto.&lt;/p&gt;
&lt;p&gt;Decorators são uma tentativa de "economizar" código, manter a sanidade e as boas práticas de programação. Ok, eu sei que a razão principal de um decorator não é essa. Dá uma passada na
&lt;a href="http://www.python.org/dev/peps/pep-0318/" title="PEP 318 - Decorators for Functions and Methods "&gt;PEP&lt;/a&gt; para descobrir mais. O lance é meio inception. Então eu curto a minha explicação... ;)&lt;/p&gt;
&lt;p&gt;Então, se você viu um @ em cima de um método no código. Parabéns, você já sabe o que é um decorator e provavelmente já utiliza.&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Criando um decorator:&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;"mas eu quero criar um decorator"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok. Para fazer isso é simples:&lt;/p&gt;
&lt;p&gt;Defina um método cujo o parametro será a assinatura de uma função decorada.&lt;/p&gt;
&lt;p&gt;Então brinque com a função e retorne a função ou outra função. Lindo não? (se lembra que eu disse que era meio inception?)&lt;/p&gt;
&lt;p&gt;Mas o decorator é isso mesmo. É um cara que vai pegar sua função bonitinha é modifica-la. Ou mesmo desfigura-la. Vou mostrar como cria um decorator brincando.&lt;/p&gt;
&lt;p&gt;Suponha que você criou uma função de somar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sum(a,b)
 return a+b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Função linda! Bom agora vou bagunçar a vida do cidadão que usa essa função e fazer que a soma seja a - b. Mas eu não quero perder o código original. Isto é um trabalho para o decorador:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def bagunca(funcao):
 def subtrai(a,b):
 return a-b
return subtrai

@bagunca
def sum(a,b):
 return a+b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bom, agora deixo com vocês executarem o código no terminal e compreende que aconteceu com a função sum. Acredito que desta forma você compreenderá o uso do decorator.&lt;/p&gt;
&lt;p&gt;Até a próxima&lt;/p&gt;</content><category term="decorators"></category></entry><entry><title>Transformando seu Código Python em Executável com o py2exe</title><link href="https://andersonberg.github.io/pythonize-pelican/seu-codigo-python-executavel-py2exe.html" rel="alternate"></link><published>2011-09-14T19:58:12-03:00</published><updated>2011-09-14T19:58:12-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2011-09-14:/pythonize-pelican/seu-codigo-python-executavel-py2exe.html</id><summary type="html">&lt;p&gt;Em diversas situações é necessário criar um arquivo executável a partir do seu código.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Em diversas situa&amp;ccedil;&amp;otilde;es &amp;eacute; necess&amp;aacute;rio criar um arquivo execut&amp;aacute;vel a partir do seu c&amp;oacute;digo. &lt;/p&gt;
&lt;p&gt;&amp;Agrave;s vezes &amp;eacute; preciso entregar um programa a um cliente que n&amp;atilde;o tem Python instalado ou n&amp;atilde;o tem as diversas bibliotecas que voc&amp;ecirc; usou pra criar sua aplica&amp;ccedil;&amp;atilde;o. Ou at&amp;eacute; mesmo no caso de voc&amp;ecirc; querer usar o seu programa em qualquer outra m&amp;aacute;quina Windows sem precisar da instala&amp;ccedil;&amp;atilde;o do Python.&lt;span&gt;&lt;/p&gt;
&lt;p&gt;Neste post vamos fazer um tutorial sobre como fazer isso utilizando o &lt;/span&gt;&lt;a href="http://www.py2exe.org"&gt;py2exe&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;INSTALA&amp;Ccedil;&amp;Atilde;O DO PY2EXE&lt;/h3&gt;

&lt;p&gt;O primeiro passo &amp;eacute; instalar o py2exe. Pra isso basta ir ao &lt;a href="http://sourceforge.net/projects/py2exe/files/"&gt;site&lt;/a&gt;&amp;nbsp;e baixar a &amp;uacute;ltima vers&amp;atilde;o. Baixe a vers&amp;atilde;o para o seu Windows (32 ou 64 bits) e de acordo com a vers&amp;atilde;o do python (2.5, 2.6, 2.7...). &amp;nbsp;&lt;/p&gt;
&lt;p&gt;A instala&amp;ccedil;&amp;atilde;o &amp;eacute; simples e padr&amp;atilde;o. Ap&amp;oacute;s a instala&amp;ccedil;&amp;atilde;o adicione a pasta de scripts ao PATH do sistema, geralmente C:\Python27\Scripts.&lt;/p&gt;
&lt;h3&gt;TUTORIAL&lt;/h3&gt;

&lt;p&gt;Primeiro vamos escrever um c&amp;oacute;digo qualquer em Python. Voc&amp;ecirc; pode escrever um c&amp;oacute;digo importando qualquer pacote, desde que este esteja instalado no seu sistema. &lt;/p&gt;
&lt;p&gt;Para este exemplo voc&amp;ecirc; pode escrever seu pr&amp;oacute;prio c&amp;oacute;digo, eu vou dar um simples exemplo utilizando a biblioteca matem&amp;aacute;tica do Python, crie um arquivo em qualquer pasta chamado calc.py e escreva o seguinte c&amp;oacute;digo:&lt;/p&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;modelo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;Digite&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;para&lt;/span&gt; &lt;span class="n"&gt;seno&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;para&lt;/span&gt; &lt;span class="n"&gt;cosseno&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;Entre&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt; &lt;span class="n"&gt;um&lt;/span&gt; &lt;span class="n"&gt;número&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;quot&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;
    &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modelo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Teste o seu c&amp;oacute;digo:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\Pythonize&amp;gt; python calc.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O segundo passo &amp;eacute; criar um script de setup. Crie um arquivo chamado setup_calc.py na mesma pasta que voc&amp;ecirc; salvou o c&amp;oacute;digo anterior e escreva este c&amp;oacute;digo:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;py2exe&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;calc.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Pronto, para criar seu arquivo execut&amp;aacute;vel, rode seu script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\Pythonize&amp;gt;python setup_calc.py py2exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ser&amp;atilde;o criadas duas pastas: build e dist. &lt;/p&gt;
&lt;p&gt;A pasta build &amp;eacute; usada somente para compilar o c&amp;oacute;digo e criar o execut&amp;aacute;vel e pode ser exclu&amp;iacute;da ap&amp;oacute;s o t&amp;eacute;rmino do processo. A pasta dist cont&amp;eacute;m os arquivos necess&amp;aacute;rios para rodar sua aplica&amp;ccedil;&amp;atilde;o. &lt;/p&gt;
&lt;p&gt;Agora voc&amp;ecirc; pode testar seu execut&amp;aacute;vel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\Pythonize&amp;gt;cd dist
C:\Pythonize\dist&amp;gt;calc.exe
Digite 1 para seno e 2 para cosseno: 1

Entre com um número: 4

-0.756802495308
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Funcionando muito bem!&lt;/p&gt;
&lt;p&gt;Se voc&amp;ecirc; quer distribuir seu programa e levar para outro computador Windows, &amp;eacute; preciso levar toda a pasta dist para que sua aplica&amp;ccedil;&amp;atilde;o funcione corretamente. Para outras informa&amp;ccedil;&amp;otilde;es, veja o &lt;a href="http://www.py2exe.org/index.cgi/Tutorial"&gt;tutorial do py2exe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para utilizar o py2exe com outros pacotes e m&amp;oacute;dulos, veja o link:&amp;nbsp;&lt;a href="http://www.py2exe.org/index.cgi/WorkingWithVariousPackagesAndModules"&gt;Working with Various Packages and Modules&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;</content><category term="executavel"></category><category term="py2exe"></category></entry><entry><title>Introdução à programação em Cython</title><link href="https://andersonberg.github.io/pythonize-pelican/introducao-programacao-cython.html" rel="alternate"></link><published>2011-09-10T03:20:23-03:00</published><updated>2011-09-10T03:20:23-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2011-09-10:/pythonize-pelican/introducao-programacao-cython.html</id><summary type="html">&lt;p&gt;Quando o seu programa exige muita velocidade, não tem jeito, o código tem que ser escrito em C. Mas todo programador sabe o quão penoso pode ser programar em C e os diversos problemas que podem surgir no seu código contribuindo com o atraso na entrega do programa final. E porque não juntar a facilidade de programar em Python com a rapidez de execução de C? Essa é a proposta do Cython, uma extensão Python que permite que sejam utilizados tipos de C dentro do código Python.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quando o seu programa exige muita velocidade, não tem jeito, o código tem que ser escrito em C. Mas todo programador sabe o quão penoso pode ser programar em C e os diversos problemas que podem surgir no seu código contribuindo com o atraso na entrega do programa final. E porque não juntar a facilidade de programar em Python com a rapidez de execução de C? Essa é a proposta do Cython, uma extensão Python que permite que sejam utilizados tipos de C dentro do código Python.&lt;/p&gt;
&lt;h3&gt;INSTALAÇÃO&lt;/h3&gt;
&lt;p&gt;O primeiro passo é a instalação. Você pode instalar o Cython através do setuptools, digitando, na linha de comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ easy_install cython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse comando funciona tanto na linha de comando no Linux, quanto no prompt do Windows.&lt;/p&gt;
&lt;p&gt;Se você não tem instalado o setuptools no Linux basta procurar pelo pacote homônimo e instalá-lo. No Windows, basta baixar o executável, na &lt;a href="http://pypi.python.org/pypi/setuptools#windows"&gt;página do pacote&lt;/a&gt; e instalar.&lt;/p&gt;
&lt;p&gt;Uma alternativa é baixar o Cython no &lt;a href="http://www.cython.org"&gt;site&lt;/a&gt;, extrair os arquivos e fazer na linha de comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dica do &lt;a href="http://frsoares.wordpress.com/"&gt;Francisco&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Em sistemas Debian e derivados, é possível instalar o cython pelo apt-get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install cython
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;TUTORIAL&lt;/h3&gt;
&lt;p&gt;Para utilizar Cython em seu código, é preciso primeiro criar um arquivo com extenção .pyx. Para um primeiro teste crie um arquivo chamado helloworld.pyx e escreva a seguinte linha:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print &amp;quot;Hello World&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em seguida, crie um arquivo chamado setup.py que tenha o seguinte conteúdo:&lt;/p&gt;
&lt;p&gt;Então, basta compilar utilizando o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py build_ext --inplace
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depois é só entrar no interpretador e importar o módulo criado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;helloworld&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos avançar e criar um código que realmente tenha tipos de dados de C. Vamos criar uma função que retorne todos os números primos de 1 até um limite passado como parâmetro e salvar num arquivo chamado primes.pyx:&lt;/p&gt;
&lt;p&gt;Para declarar tipos C, você deve usar &lt;em&gt;cdef &lt;/em&gt;e informar o tipo de dado, como nas linhas 2 e 3. Na linha 3, como qualquer array em C, deve ser informado o tamanho do array.&lt;/p&gt;
&lt;p&gt;Nas linha 9 e 11 é que aparece o ganho no desempenho, a iteração dos blocos &lt;em&gt;while&lt;/em&gt; é feita com tipos C, que torna a execução mais rápida.&lt;/p&gt;
&lt;p&gt;Feito isso, basta criar o arquivo setup.py, como no exemplo anterior:&lt;/p&gt;
&lt;p&gt;E compilar com o comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py build_ext --inplace
&lt;/pre&gt;&lt;/div&gt;</content><category term="cython"></category></entry><entry><title>Programando em Python no Vim</title><link href="https://andersonberg.github.io/pythonize-pelican/programando-python-vim.html" rel="alternate"></link><published>2011-09-08T14:45:20-03:00</published><updated>2011-09-08T14:45:20-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2011-09-08:/pythonize-pelican/programando-python-vim.html</id><summary type="html">&lt;p&gt;No Linux, um bom editor para código Python é o Vim. Costumo usar o Vim no Ubuntu e tem sido uma boa experiência. O Vim pode ser instalado também no Windows e é um bom substituto para o IDLE. Você pode fazer o download da versão para Windows no site do Vim. Versões recentes do Vim possuem suporte para Python nativo. Para ter certeza disso abra o Vim e digite :python print “hello world” (com dois pontos antes da palavra python). No Windows isso vai funcionar com o gVim.&lt;/p&gt;</summary><content type="html">&lt;p&gt;No Linux, um bom editor para c&amp;oacute;digo Python &amp;eacute; o Vim. Costumo usar o Vim no Ubuntu e tem sido uma boa experi&amp;ecirc;ncia. O Vim pode ser instalado tamb&amp;eacute;m no Windows e &amp;eacute; um bom substituto para o IDLE. Voc&amp;ecirc; pode fazer o download da vers&amp;atilde;o para Windows no &lt;a href="http://www.vim.org/download.php#pc"&gt;site do Vim&lt;/a&gt;. Vers&amp;otilde;es recentes do Vim possuem suporte para Python nativo. &lt;!--more--&gt;Para ter certeza disso abra o Vim e digite &lt;em&gt;:python print &amp;ldquo;hello world&amp;rdquo;&lt;/em&gt; (com dois pontos antes da palavra python). No Windows isso vai funcionar com o gVim.&lt;/p&gt;

&lt;p&gt;O gVim j&amp;aacute; tem auto-identa&amp;ccedil;&amp;atilde;o e highlighting pra Python. Para ter o code completion no Vim &amp;eacute; necess&amp;aacute;rio ter um plugin instalado. Na vers&amp;atilde;o 7.3 para Windows o omni completion j&amp;aacute; veio dispon&amp;iacute;vel, para testar bastar digitar ctrl+x e ctrl+o, que vai abrir uma janela dropdown com diversas op&amp;ccedil;&amp;otilde;es. No Linux, para habilitar o omni completion, adicione a seguinte linha no arquivo /etc/vim/vimrc:&lt;/p&gt;

&lt;pre&gt;autocmd FileType python set omnifunc=pythoncomplete#Complete&lt;/pre&gt;

&lt;p&gt;Outras fun&amp;ccedil;&amp;otilde;es interessantes que podem ser adicionadas ao Vim para codifica&amp;ccedil;&amp;atilde;o Python podem ser vistas em:&amp;nbsp;&lt;a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/"&gt;VIM as Python IDE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Update (17/02/12): Escrevemos &amp;nbsp;um post mais completo sobre como utilizar o &lt;a href="http://www.pythonize.org/tornando-o-vim-uma-ide-amigavel-pra-python/" title="Vim como IDE pra Python"&gt;Vim como IDE pra Python&lt;/a&gt;.&lt;/p&gt;</content><category term="vim"></category></entry><entry><title>Programando em Python no IDLE</title><link href="https://andersonberg.github.io/pythonize-pelican/programando-python-idle.html" rel="alternate"></link><published>2011-09-08T00:46:47-03:00</published><updated>2011-09-08T00:46:47-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2011-09-08:/pythonize-pelican/programando-python-idle.html</id><summary type="html">&lt;p&gt;Depois da instalação do Python e alguns testes vamos pôr a mão na massa e trabalhar de verdade com arquivos de código. Todo código que você faz no interpretador é perdido quando você fecha o interpretador. Mas eu fiz muito código legal e vou simplesmente perder tudo? Python também trabalha com arquivos de código que você pode salvar em sua máquina para rodar depois.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Depois da instala&amp;ccedil;&amp;atilde;o do Python e alguns testes vamos p&amp;ocirc;r a m&amp;atilde;o na massa e trabalhar de verdade com arquivos de c&amp;oacute;digo. Todo c&amp;oacute;digo que voc&amp;ecirc; faz no interpretador &amp;eacute; perdido quando voc&amp;ecirc; fecha o interpretador. Mas eu fiz muito c&amp;oacute;digo legal e vou simplesmente perder tudo? Python tamb&amp;eacute;m trabalha com arquivos de c&amp;oacute;digo que voc&amp;ecirc; pode salvar em sua m&amp;aacute;quina para rodar depois.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Os arquivos Python t&amp;ecirc;m extens&amp;atilde;o .py. &amp;Eacute; poss&amp;iacute;vel rodar um arquivo Python a partir da linha de comando da seguinte forma:&lt;/p&gt;

&lt;pre&gt;$ python nome_do_arquivo.py&lt;/pre&gt;

&lt;p&gt;Com isso todo o c&amp;oacute;digo que est&amp;aacute; salvo no arquivo &amp;eacute; transformado em bytecode, que &amp;eacute; um arquivo bin&amp;aacute;rio usado pelo interpretador. O bytecode &amp;eacute; multiplataforma, ou seja, voc&amp;ecirc; pode levar seu c&amp;oacute;digo pra rodar em qualquer m&amp;aacute;quina e qualquer sistema. O bytecode &amp;eacute; armazenado em sua m&amp;aacute;quina geralmente com a extens&amp;atilde;o .pyc, quando voc&amp;ecirc; executar seu c&amp;oacute;digo novamente sem altera&amp;ccedil;&amp;otilde;es o programa n&amp;atilde;o precisa ser compilado de novo, sendo executado mais r&amp;aacute;pido. Sempre que o seu c&amp;oacute;digo fonte &amp;eacute; alterado, o interpretador gera um novo bytecode.&lt;/p&gt;

&lt;p&gt;Voc&amp;ecirc; pode escrever seu c&amp;oacute;digo no tradicional bloco de notas, mas existem diversas alternativas para escrever c&amp;oacute;digo Python e eu recomendo fortemente que n&amp;atilde;o seja escrito no bloco de notas. Existem v&amp;aacute;rios editores de texto e IDEs pr&amp;oacute;prias pra se escrever c&amp;oacute;digo em Python. No Windows temos o Notepad++ que tem highlighting (destaca palavras especiais e seu c&amp;oacute;digo em cores) ou o pr&amp;oacute;prio IDLE que tamb&amp;eacute;m vem com highlighting, auto-identa&amp;ccedil;&amp;atilde;o e outros recursos que facilitam a cria&amp;ccedil;&amp;atilde;o do c&amp;oacute;digo. No Linux tem o Vim, que possui todos esses recursos citados anteriormente ou o Kate. Voc&amp;ecirc; pode ver outros editores na &lt;a href="http://wiki.python.org/moin/PythonEditors"&gt;lista de editores Python&lt;/a&gt;&amp;nbsp;e tamb&amp;eacute;m &lt;a href="http://wiki.python.org/moin/IntegratedDevelopmentEnvironments"&gt;IDEs que suportam Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neste post vamos tratar do IDLE para Windows em outro post vou falar do Vim no Linux, se algu&amp;eacute;m tiver experi&amp;ecirc;ncia com outros editores ou IDEs, por favor compartilhe conosco nos coment&amp;aacute;rios.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IDLE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O IDLE, al&amp;eacute;m de ter uma linha de comando Python, tamb&amp;eacute;m &amp;eacute; usado como editor de arquivo fonte. Com a janela principal do IDLE aberta v&amp;aacute; ao menu File-&amp;gt;New Window e ser&amp;aacute; aberta uma janela em branco onde &amp;eacute; poss&amp;iacute;vel escrever o c&amp;oacute;digo.&lt;/p&gt;

&lt;p&gt;Vamos fazer um pequeno teste. Na nova janela aberta digite o c&amp;oacute;digo que est&amp;aacute; na imagem (print "Hello World"):&lt;/p&gt;

&lt;div class="wp-caption aligncenter" id="attachment_73"&gt;&lt;a href="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/helloworldidle2.png"&gt;&lt;img src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/helloworldidle2.png" title="helloworldidle" height="89" width="500" alt="" class="size-full wp-image-73" /&gt;&lt;/a&gt;Hello World no IDLE
&lt;p class="wp-caption-text"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Salve o arquivo com o nome: helloworld.py&lt;/p&gt;

&lt;p&gt;Voc&amp;ecirc; j&amp;aacute; pode perceber a fun&amp;ccedil;&amp;atilde;o highlighting nesse c&amp;oacute;digo.&lt;/p&gt;

&lt;p&gt;Nesta mesma janela, v&amp;aacute; ao menu Run-&amp;gt;Run Module ou aperte a tecla F5. Vai ser impresso o texto Hello World na tela do interpretador.&lt;/p&gt;

&lt;p&gt;Vamos avan&amp;ccedil;ar um pouco mais. Escreva o seguinte trecho de c&amp;oacute;digo no IDLE:&lt;/p&gt;

&lt;pre&gt;#-- coding: latin1 --
x = 7*3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; #Isto &amp;eacute; um coment&amp;aacute;rio&lt;br /&gt;y = "Hello"&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;#Este &amp;eacute; mais um coment&amp;aacute;rio&lt;br /&gt;if y == "Hello":&lt;br /&gt;x = x + 1&lt;br /&gt;y = y + "World"&amp;nbsp;&amp;nbsp;&amp;nbsp; #Concatena&amp;ccedil;&amp;atilde;o de strings&lt;br /&gt;print x&lt;br /&gt;print y&lt;/pre&gt;

&lt;p&gt;Aqui, mais uma fun&amp;ccedil;&amp;atilde;o do IDLE: auto-identa&amp;ccedil;&amp;atilde;o, assim que voc&amp;ecirc; digita linha 4 e d&amp;aacute; Enter, o IDLE identifica um novo bloco de c&amp;oacute;digo. O Python identifica blocos de c&amp;oacute;digo atrav&amp;eacute;s da identa&amp;ccedil;&amp;atilde;o, diferente de outras linguagens como C e Java que identificam blocos entre chaves ({}).&lt;/p&gt;

&lt;p&gt;Outras fun&amp;ccedil;&amp;otilde;es interessante est&amp;atilde;o no menu Format na janela de edi&amp;ccedil;&amp;atilde;o de c&amp;oacute;digo.&lt;/p&gt;

&lt;div class="wp-caption aligncenter" id="attachment_77"&gt;&lt;a href="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle_format.png"&gt;&lt;img src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle_format.png" title="idle_format" height="248" width="500" alt="" class="size-full wp-image-77" /&gt;&lt;/a&gt;Menu Format no IDLE
&lt;p class="wp-caption-text"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Neste menu voc&amp;ecirc; pode identar ou tirar identa&amp;ccedil;&amp;atilde;o de um trecho selecionado, &amp;eacute; poss&amp;iacute;vel comentar ou descomentar o c&amp;oacute;digo, transformar tab em espa&amp;ccedil;os ou vice-versa.&lt;/p&gt;

&lt;p&gt;D&amp;uacute;vidas, opini&amp;otilde;es, sugest&amp;otilde;es e experi&amp;ecirc;ncias, postem nos coment&amp;aacute;rios!&lt;/p&gt;</content></entry><entry><title>Iniciando a programação em Python</title><link href="https://andersonberg.github.io/pythonize-pelican/iniciando-programacao-python.html" rel="alternate"></link><published>2011-09-04T15:06:10-03:00</published><updated>2011-09-04T15:06:10-03:00</updated><author><name>Anderson Berg</name></author><id>tag:andersonberg.github.io,2011-09-04:/pythonize-pelican/iniciando-programacao-python.html</id><summary type="html">&lt;p&gt;Neste blog vou apresentar o que eu aprendi de Python durante mais de três anos e minhas experiências diárias com a linguagem. Vou começar do início, mostrando para aqueles que estão iniciando a como programar nesta poderosa linguagem.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Neste blog vou apresentar o que eu aprendi de Python durante mais de três anos e minhas experiências diárias com a linguagem. Vou começar do início, mostrando para aqueles que estão iniciando a como programar nesta poderosa linguagem.&lt;/p&gt;
&lt;p&gt;Não vou dizer por que você deve programar em Python. Eu a escolhi porque acho uma linguagem simples e poderosa, com poucas linhas de código você consegue criar uma aplicação completa rapidamente. Gosto de Python também porque possui muitas ferramentas que facilitam o dia-a-dia do desenvolvimento de software tanto comercial quanto científico.
Então vamos ao que interessa, pra programar em Python você precisa fazer o download e instalar em sua máquina.
Instalação para os usuários Linux/Mac OS X
Se você usa uma distribuição Linux, seja Ubuntu, Fedora, OpenSUSE, CentOS, etc... ou se você usa o Mac OS X é bem provável que o Python já esteja instalado, basta abrir um terminal (konsole, para KDE ou gnome-terminal para Gnome) e digitar “python” (sem aspas) que o interpretador Python irá iniciar.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/python-linux.png" title="Interpretador Python no Shell do Linux" alt="Interpretador Python no Shell do Linux"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interpretador Python no Shell do Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Instalação para os usuários Windows
Para os usuários de Windows é necessário instalar o interpretador. Visite o site &lt;a href="http://www.python.org/download/"&gt;http://www.python.org/download/&lt;/a&gt; e baixe a última versão. Python mantém duas versões: 2.7.x e 3.2.x. Se você não sabe qual escolher, vá de 2.7, pois muitas ferramentas e frameworks são compatíveis somente com a versão 2.7. Instale normalmente, como qualquer outro instalador Windows. Depois da instalação é preciso configurar a variável PATH do sistema. No Windows 7, abra o Painel de Controle, na pesquisa (no canto superior direito)  digite “variáveis de ambiente” (sem aspas) e clique em “Editar variáveis de ambiente para sua conta”. Na seção: “Variáveis de usuário” clique na variável PATH ou crie uma com este nome e no campo “Valor da variável” digite: “;C:\Python27” (sem aspas) no final do texto que já estiver lá (isso se você instalou o Python na pasta raiz C:)
Pronto, agora abra o prompt de comando e digite python, você terá o interpretador pronto pra trabalhar.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/python-cmd1.png" title="Chamando o interpretador Python na linha de comando" alt="Chamando o interpretador Python na linha de comando"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chamando o interpretador Python na linha de comando&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Como alternativa, junto com o Python é instalado um ambiente Shell de desenvolvimento, o IDLE, que você pode usar como interpretador (da mesma forma que no cmd) ou como editor de arquivos Python.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/idle-python.png" title="IDLE Python" alt="IDLE Python"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IDLE Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Primeiros passos no interpretador
Com o Python devidamente instalado no seu sistema, vamos fazer alguns testes para ter as primeiras impressões de como é a experiência de programação. Vamos então, usar o prompt do interpretador Python. Você pode usar o IDLE ou iniciar o interpretador na linha de comando. Para imprimir qualquer texto na linha de comando, basta digitar print seguido de um texto entre aspas. Por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print &amp;quot;Hello World!&amp;quot;
Hello World!

&amp;gt;&amp;gt;&amp;gt; print “Meu primeiro teste em Python.”
Meu primeiro teste em Python.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bem simples, e você já fez o clássico “Hello World” em Python.
O interpretador Python pode ser usado como calculadora:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 2+8
10
&amp;gt;&amp;gt;&amp;gt;9*7
63
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Digite o seguinte no interpretador:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fazendo isso você estará carregando o módulo de funções matemáticas de Python. Com isso estarão disponíveis diversas funções matemáticas pra você testar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; math.sqrt(16)
4.0
&amp;gt;&amp;gt;&amp;gt; math.pow(5,3)
125
math.exp(4)
54.598150033144236
&lt;/pre&gt;&lt;/div&gt;</content></entry></feed>