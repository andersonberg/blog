<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pythonize - Programação</title><link href="http://pythonize.org/" rel="alternate"></link><link href="http://pythonize.org/feeds/programacao.atom.xml" rel="self"></link><id>http://pythonize.org/</id><updated>2011-10-24T00:58:57-03:00</updated><entry><title>Entendendo Decorators de forma simples</title><link href="http://pythonize.org/entendendo-decorators-de-forma-simples.html" rel="alternate"></link><published>2011-10-24T00:58:57-03:00</published><updated>2011-10-24T00:58:57-03:00</updated><author><name>Rômulo Jales</name></author><id>tag:pythonize.org,2011-10-24:/entendendo-decorators-de-forma-simples.html</id><summary type="html">&lt;p&gt;O que é quando usar um decorator:&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sabe aquele trecho de código que vive se repetindo no seu código e você acha um saco ter repetir? Imagine que esse trecho repetido necessite uma refatoração e imagine que seu projeto é grande você já começa a vislumbrar um cenário caótico.&lt;/p&gt;
&lt;p&gt;Sabe aquele trecho de código que vive se repetindo no seu código e você acha um saco ter repetir? Imagine que esse trecho repetido necessite uma refatoração e imagine que seu projeto é grande você já começa a vislumbrar um cenário caótico.&lt;/p&gt;
&lt;p&gt;As boas práticas de programação tentam prevenir este tipo de problema. Mas tem horas que nem o seu mega modelo resolve. Um caso simples é quando o trecho de código que se repete necessita de parametrização ou muda de acordo com o contexto.&lt;/p&gt;
&lt;p&gt;Decorators são uma tentativa de "economizar" código, manter a sanidade e as boas práticas de programação. Ok, eu sei que a razão principal de um decorator não é essa. Dá uma passada na
&lt;a href="http://www.python.org/dev/peps/pep-0318/" title="PEP 318 - Decorators for Functions and Methods "&gt;PEP&lt;/a&gt; para descobrir mais. O lance é meio inception. Então eu curto a minha explicação... ;)&lt;/p&gt;
&lt;p&gt;Então, se você viu um @ em cima de um método no código. Parabéns, você já sabe o que é um decorator e provavelmente já utiliza.&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Criando um decorator:&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;"mas eu quero criar um decorator"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok. Para fazer isso é simples:&lt;/p&gt;
&lt;p&gt;Defina um método cujo o parametro será a assinatura de uma função decorada.&lt;/p&gt;
&lt;p&gt;Então brinque com a função e retorne a função ou outra função. Lindo não? (se lembra que eu disse que era meio inception?)&lt;/p&gt;
&lt;p&gt;Mas o decorator é isso mesmo. É um cara que vai pegar sua função bonitinha é modifica-la. Ou mesmo desfigura-la. Vou mostrar como cria um decorator brincando.&lt;/p&gt;
&lt;p&gt;Suponha que você criou uma função de somar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sum(a,b)
 return a+b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Função linda! Bom agora vou bagunçar a vida do cidadão que usa essa função e fazer que a soma seja a - b. Mas eu não quero perder o código original. Isto é um trabalho para o decorador:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def bagunca(funcao):
 def subtrai(a,b):
 return a-b
return subtrai

@bagunca
def sum(a,b):
 return a+b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bom, agora deixo com vocês executarem o código no terminal e compreende que aconteceu com a função sum. Acredito que desta forma você compreenderá o uso do decorator.&lt;/p&gt;
&lt;p&gt;Até a próxima&lt;/p&gt;</content><category term="decorators"></category></entry></feed>