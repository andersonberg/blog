<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pythonize - Iniciante, Core</title><link href="http://pythonize.org/" rel="alternate"></link><link href="http://pythonize.org/feeds/iniciante-core.atom.xml" rel="self"></link><id>http://pythonize.org/</id><updated>2012-01-16T02:12:27-03:00</updated><entry><title>Python e lambda</title><link href="http://pythonize.org/python-lambda.html" rel="alternate"></link><published>2012-01-16T02:12:27-03:00</published><updated>2012-01-16T02:12:27-03:00</updated><author><name>Anderson Berg</name></author><id>tag:pythonize.org,2012-01-16:/python-lambda.html</id><summary type="html">&lt;p&gt;Sabe lambda? Lambda é algo muito legal. Com lambda você pode criar em tempo de execução funções e fazer algumas graças.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sabe lambda? Lambda &amp;eacute; algo muito legal. Com lambda voc&amp;ecirc; pode criar em tempo de execu&amp;ccedil;&amp;atilde;o fun&amp;ccedil;&amp;otilde;es e fazer algumas gra&amp;ccedil;as.&lt;/p&gt;

&lt;p&gt;Vejamos algo bonito com lambda. Suponha a fun&amp;ccedil;&amp;atilde;o fatorial.&lt;/p&gt;

&lt;p&gt;A fun&amp;ccedil;&amp;atilde;o fatorial &amp;eacute; definida tal que dado um n&amp;uacute;mero x o fatorial deste n&amp;uacute;mero &amp;eacute;:&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;x*(x-n) com n variando de (x-1) at&amp;eacute; 1.&lt;/p&gt;

&lt;p&gt;Logo podemos traduzir num c&amp;oacute;digo python:&lt;/p&gt;

&lt;pre&gt;&lt;br /&gt;def fatorial(x):&lt;br /&gt; if x&amp;lt;=1:&lt;br /&gt; return 1&lt;br /&gt; else:&lt;br /&gt; return x*fatorial(x-1)&lt;/pre&gt;

&lt;p&gt;Esse c&amp;oacute;digo usa recurs&amp;atilde;o, espero que voc&amp;ecirc; saiba o que &amp;eacute; recurs&amp;atilde;o... ;)&lt;/p&gt;

&lt;p&gt;Bom, com lambda esse mesmo c&amp;oacute;digo pode ter apenas uma linha, duvida?&lt;/p&gt;

&lt;pre&gt;&lt;br /&gt;fatorial = lambda x: 1 if x &amp;lt;=1 else x*fatorial(x-1)&lt;/pre&gt;

&lt;p&gt;Definimos em fatorial uma fun&amp;ccedil;&amp;atilde;o que executa o calculo de um fatorial de um dado n&amp;uacute;mero x.&lt;/p&gt;

&lt;p&gt;Agora abra o seu interpratador python copie e cole o c&amp;oacute;digo para testar. N&amp;eacute; lindo?&lt;/p&gt;

&lt;p&gt;Python tanto na vers&amp;atilde;o 2 quanto na vers&amp;atilde;o 3 define lambda com um atalho para cria&amp;ccedil;&amp;atilde;o de fun&amp;ccedil;&amp;otilde;es. A sintaxe &amp;eacute; definida assim:&lt;/p&gt;

&lt;pre&gt;&lt;strong id="grammar-token-lambda_form"&gt;lambda_form &lt;/strong&gt; ::= "lambda" [&lt;a href="http://docs.python.org/reference/compound_stmts.html#grammar-token-parameter_list"&gt;&lt;tt&gt;parameter_list&lt;/tt&gt;&lt;/a&gt;]: &lt;a href="http://docs.python.org/reference/expressions.html#grammar-token-expression"&gt;&lt;tt&gt;expression&lt;/tt&gt;&lt;/a&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre id="index-1018"&gt;&lt;strong id="grammar-token-old_lambda_form"&gt;old_lambda_form&lt;/strong&gt; ::=  "lambda" [&lt;a href="http://docs.python.org/reference/compound_stmts.html#grammar-token-parameter_list"&gt;&lt;tt&gt;parameter_list&lt;/tt&gt;&lt;/a&gt;]: &lt;a href="http://docs.python.org/reference/expressions.html#grammar-token-old_expression"&gt;&lt;tt&gt;old_expression&lt;/tt&gt;&lt;/a&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;Vou ler para voc&amp;ecirc;: uma express&amp;atilde;o lambda &amp;eacute; formada pela palavra reservada lambda seguida por uma lista (n&amp;atilde;o o objeto lista) de parametros seperada por ":" e a express&amp;atilde;o.&lt;/p&gt;

&lt;p&gt;No nosso c&amp;oacute;digo a cima, fatorial &amp;eacute; o nome da express&amp;atilde;o lambda. O python sabe que a fun&amp;ccedil;&amp;atilde;o &amp;eacute; um lambda porque voc&amp;ecirc; disse isso usando a string lambda logo no inicio da express&amp;atilde;o.&lt;/p&gt;

&lt;p&gt;O x &amp;eacute; o parametro. Se voc&amp;ecirc; quisesse passar mais parametros, bastava separa-lo por virgulas. Assim:&lt;/p&gt;

&lt;pre&gt;&lt;br /&gt;funcao = lambda x,y,z: x+y+z&lt;/pre&gt;

&lt;p&gt;pergunta, qual o retorno de funcao(1,2,3) ?&lt;/p&gt;

&lt;p&gt;Agora a parte mais dif&amp;iacute;cil, a express&amp;atilde;o.&lt;/p&gt;

&lt;p&gt;A express&amp;atilde;o &amp;eacute; como voc&amp;ecirc; vai manipular os parametros para ter um retorno. Com lambda n&amp;atilde;o &amp;eacute; necess&amp;aacute;rio por a palavra reservada return.&lt;/p&gt;

&lt;p&gt;Essa express&amp;atilde;o s&amp;oacute; pode ser de tr&amp;ecirc;s formas:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Uma comando de uma linha (x+1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;outra express&amp;atilde;o lambda.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Ou uma express&amp;atilde;o condicional. (incluem testes de l&amp;oacute;gica [or, and, not] )&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;No fatorial eu usei uma express&amp;atilde;o condicional. Na funcao eu usei uma express&amp;atilde;o de uma linha. E poderia usar outra express&amp;atilde;o lambda.&lt;/p&gt;

&lt;p&gt;Mas para memorizar, voc&amp;ecirc; deve escrever a sua express&amp;atilde;o sempre com uma linha.&lt;/p&gt;

&lt;p&gt;Voc&amp;ecirc; pode fazer uso de recurs&amp;atilde;o e uso avan&amp;ccedil;ados de exepress&amp;atilde;o.&lt;/p&gt;

&lt;p&gt;original :&lt;a href="http://romulojales.com/python-e-lambda/"&gt; http://romulojales.com/python-e-lambda/&lt;/a&gt;&lt;/p&gt;</content><category term="lambda"></category></entry></feed>